!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("ecsy"),require("three"),require("three/examples/jsm/loaders/GLTFLoader.js"),require("three/examples/jsm/vr/WebVR.js")):"function"==typeof define&&define.amd?define(["exports","ecsy","three","three/examples/jsm/loaders/GLTFLoader.js","three/examples/jsm/vr/WebVR.js"],t):(e=e||self,function(){var s=e.ECSYTHREE,n=e.ECSYTHREE={};t(n,e.ECSY,e.THREE,e.GLTFLoader_js,e.WebVR_js),n.noConflict=function(){return e.ECSYTHREE=s,n}}())}(this,(function(e,t,s,n,r){"use strict";class o{constructor(){this.value=null}reset(){this.value=null}}class i{constructor(){this.texture="",this.type=""}reset(){this.texture="",this.type=""}}class a{constructor(){this.value=null}reset(){this.value=null}}class l{constructor(){this.reset()}reset(){this.value=!1}}class d extends t.TagComponent{}class c{constructor(){this.position=new s.Vector3,this.rotation=new s.Vector3}copy(e){this.position.copy(e.position),this.rotation.copy(e.rotation)}reset(){this.position.set(0,0,0),this.rotation.set(0,0,0)}}class u{constructor(){this.primitive="box"}reset(){this.primitive="box"}}class h{}class m{reset(){}}const p=t.createComponentClass({fov:{default:45},aspect:{default:1},near:{default:1},far:{default:1e3},layers:{default:0},handleResize:{default:!0}},"Camera"),g=t.createComponentClass({vr:{default:!0},antialias:{default:!0},handleResize:{default:!0}},"WebGLRenderer");class f{constructor(){this.scene=null,this.camera=null}reset(){this.scene=null,this.camera=null}}class v extends t.System{execute(){this.queries.entities.removed.forEach(()=>{}),this.queries.entities.added.forEach(e=>{let t,n=e.getComponent(u);switch(n.primitive){case"torus":t=new s.TorusBufferGeometry(n.radius,n.tube,n.radialSegments,n.tubularSegments);break;case"sphere":t=new s.IcosahedronBufferGeometry(n.radius,1);break;case"box":t=new s.BoxBufferGeometry(n.width,n.height,n.depth)}let r="torus"===n.primitive?10066176:16777215*Math.random(),i=new s.MeshStandardMaterial({color:r,roughness:.7,metalness:0,flatShading:!0}),l=new s.Mesh(t,i);if(l.castShadow=!0,l.receiveShadow=!0,e.hasComponent(c)){let t=e.getComponent(c);l.position.copy(t.position),t.rotation&&l.rotation.set(t.rotation.x,t.rotation.y,t.rotation.z)}e.addComponent(a,{value:l}),e.hasComponent(o)&&e.getComponent(o).value.getComponent(a).value.add(l)})}}v.queries={entities:{components:[u],listen:{added:!0,removed:!0}}};var y=(new n.GLTFLoader).setPath("/assets/");class w extends t.System{execute(){var e=this.queries.entities.added;for(let n=0;n<e.length;n++){var t=e[n],s=t.getComponent(h);y.load(s.url,e=>{t.hasComponent(o)&&t.getComponent(o).value.add(e.scene),t.addComponent(a,{value:e.scene})})}}}w.queries={entities:{components:[h],listen:{added:!0}}};class C extends t.System{execute(){let e=this.queries.entities.results;for(let t=0;t<e.length;t++){let n=e[t],r=n.getComponent(i),o=new s.Group,l=new s.BoxBufferGeometry(100,100,100);if(l.scale(1,1,-1),"cubemap-stereo"===r.type){let e=b(r.textureUrl,12),t=[];for(let n=0;n<6;n++)t.push(new s.MeshBasicMaterial({map:e[n]}));let i=new s.Mesh(l,t);i.layers.set(1),o.add(i);let d=[];for(let t=6;t<12;t++)d.push(new s.MeshBasicMaterial({map:e[t]}));let c=new s.Mesh(l,d);c.layers.set(2),o.add(c),n.addComponent(a,{value:o})}else console.warn("Unknown skybox type: ",r.type)}}}function b(e,t){let n=[];for(let e=0;e<t;e++)n[e]=new s.Texture;return(new s.ImageLoader).load(e,(function(e){let t,s,r=e.height;for(let o=0;o<n.length;o++)s=(t=document.createElement("canvas")).getContext("2d"),t.height=r,t.width=r,s.drawImage(e,r*o,0,r,r,0,0,r,r),n[o].image=t,n[o].needsUpdate=!0})),n}C.queries={entities:{components:[i,t.Not(a)]}};class x extends t.System{processVisibility(e){e.forEach(e=>{e.getMutableComponent(a).value.visible=e.getComponent(l).value})}execute(){this.processVisibility(this.queries.entities.added),this.processVisibility(this.queries.entities.changed)}}x.queries={entities:{components:[l,a],listen:{added:!0,changed:[l]}}};class S{constructor(){this.renderer=null}}class E extends t.System{init(){window.addEventListener("resize",()=>{this.queries.renderers.results.forEach(e=>{var t=e.getMutableComponent(g);t.width=window.innerWidth,t.height=window.innerHeight})},!1)}execute(){this.queries.uninitializedRenderers.results.forEach(e=>{var t=e.getComponent(g),n=new s.WebGLRenderer({antialias:t.antialias});n.setPixelRatio(window.devicePixelRatio),t.handleResize&&n.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(n.domElement),t.vr&&(n.vr.enabled=!0,document.body.appendChild(r.WEBVR.createButton(n,{referenceSpaceType:"local"}))),e.addComponent(S,{renderer:n})}),this.queries.renderers.changed.forEach(e=>{var t=e.getComponent(g),s=e.getComponent(S).renderer;t.width===s.width&&t.height===s.height||s.setSize(t.width,t.height)}),this.queries.renderers.results.forEach(e=>{var t=e.getComponent(S).renderer;this.queries.renderables.results.forEach(e=>{var s=e.getComponent(f),n=s.scene.getComponent(a).value,r=s.camera.getComponent(a).value;t.render(n,r)})})}}E.queries={uninitializedRenderers:{components:[g,t.Not(S)]},renderers:{components:[g,S],listen:{changed:[g]}},renderables:{components:[f]}};class q extends t.System{execute(){let e=this.queries.parent.added;for(var t=0;t<e.length;t++){var s=e[t];console.log("Adding",t),s.getComponent(o).value.getComponent(a).value.add(s.getComponent(a).value)}}}q.queries={parent:{components:[o,a],listen:{added:!0}}};class M extends t.System{init(){window.addEventListener("resize",()=>{this.queries.cameras.results.forEach(e=>{e.getComponent(p).handleResize&&(e.getMutableComponent(p).aspect=window.innerWidth/window.innerHeight,console.log("Aspect updated"))})},!1)}execute(){let e=this.queries.cameras.changed;for(let t=0;t<e.length;t++){let s=e[t],n=s.getComponent(p),r=s.getMutableComponent(a).value;r.aspect!==n.aspect&&(console.log("Camera Updated"),r.aspect=n.aspect,r.updateProjectionMatrix())}let t=this.queries.camerasUninitialized.results;for(let e=0;e<t.length;e++){let n=t[e],r=n.getComponent(p),o=new s.PerspectiveCamera(r.fov,r.aspect,r.near,r.far);o.layers.enable(r.layers),n.addComponent(a,{value:o})}}}M.queries={camerasUninitialized:{components:[p,t.Not(a)]},cameras:{components:[p,a],listen:{changed:[p]}}};class R extends t.System{init(){this.initialized=!1;var e=new s.FontLoader;this.font=null,e.load("/assets/fonts/helvetiker_regular.typeface.json",e=>{this.font=e,this.initialized=!0})}execute(){this.font&&(this.queries.entities.changed.forEach(e=>{var t=e.getComponent(m),n=new s.TextGeometry(t.text,{font:this.font,size:1,height:.1,curveSegments:3,bevelEnabled:!0,bevelThickness:.03,bevelSize:.03,bevelOffset:0,bevelSegments:3});e.getMutableComponent(a).value.geometry=n}),this.queries.entities.added.forEach(e=>{var t=e.getComponent(m),n=new s.TextGeometry(t.text,{font:this.font,size:1,height:.1,curveSegments:3,bevelEnabled:!0,bevelThickness:.03,bevelSize:.03,bevelOffset:0,bevelSegments:3});Math.random();var r=new s.MeshStandardMaterial({color:16777215,roughness:.7,metalness:0}),o=new s.Mesh(n,r);e.addComponent(a,{value:o})}))}}function T(e){e.registerSystem(q).registerSystem(M).registerSystem(E,{priority:1})}R.queries={entities:{components:[m],listen:{added:!0,changed:!0}}},e.Active=class{constructor(){this.reset()}reset(){this.value=!1}},e.Camera=p,e.CameraRig=class{constructor(){this.reset()}reset(){this.leftHand=null,this.rightHand=null,this.camera=null}},e.CameraSystem=M,e.Draggable=class{constructor(){this.reset()}reset(){this.value=!1}},e.Dragging=d,e.GLTFLoaderSystem=w,e.GLTFModel=h,e.Geometry=u,e.GeometrySystem=v,e.Material=class{constructor(){this.color=16711680}},e.Object3D=a,e.Parent=o,e.Position=class{constructor(){this.position=new s.Vector3}reset(){this.position.set(0,0,0)}},e.Rotation=class{constructor(){this.rotation=new s.Vector3}reset(){this.rotation.set(0,0,0)}},e.Scene=class{constructor(){this.scene=null}reset(){this.scene=null}},e.Sky=class{constructor(){}reset(){}},e.SkyBox=i,e.SkyBoxSystem=C,e.TextGeometry=m,e.TextGeometrySystem=R,e.Transform=c,e.TransformSystem=q,e.VRController=class{constructor(){this.id=0,this.controller=null}reset(){}},e.VisibilitySystem=x,e.Visible=l,e.WebGLRendererSystem=E,e.init=T,e.initializeDefault=function(e=new t.World){T(e);let n=e.createEntity().addComponent(a,{value:new s.Scene}),r=e.createEntity().addComponent(g),o=e.createEntity().addComponent(p,{fov:90,aspect:window.innerWidth/window.innerHeight,near:1,far:1e3,layers:1,handleResize:!0}),i=e.createEntity().addComponent(f,{scene:n,camera:o});return{world:e,entities:{scene:n,camera:o,renderer:r,renderables:i}}},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
