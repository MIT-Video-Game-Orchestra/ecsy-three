!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("ecsy"),require("three"),require("three/examples/jsm/loaders/GLTFLoader.js"),require("three/examples/jsm/vr/WebVR.js")):"function"==typeof define&&define.amd?define(["exports","ecsy","three","three/examples/jsm/loaders/GLTFLoader.js","three/examples/jsm/vr/WebVR.js"],t):(e=e||self,function(){var s=e.ECSYTHREE,n=e.ECSYTHREE={};t(n,e.ECSY,e.THREE,e.GLTFLoader_js,e.WebVR_js),n.noConflict=function(){return e.ECSYTHREE=s,n}}())}(this,(function(e,t,s,n,r){"use strict";class i{constructor(){this.value=null}reset(){this.value=null}}class a{constructor(){this.texture="",this.type=""}reset(){this.texture="",this.type=""}}class o{constructor(){this.value=null}reset(){this.value=null}}class l{constructor(){this.reset()}reset(){this.value=!1}}class d extends t.TagComponent{}class c{constructor(){this.position=new s.Vector3,this.rotation=new s.Vector3}copy(e){this.position.copy(e.position),this.rotation.copy(e.rotation)}reset(){this.position.set(0,0,0),this.rotation.set(0,0,0)}}class u{constructor(){this.primitive="box"}reset(){this.primitive="box"}}class h{}class m{reset(){}}const p=t.createComponentClass({fov:{default:45},aspect:{default:1},near:{default:1},far:{default:1e3},layers:{default:0},handleResize:{default:!0}},"Camera"),v=t.createComponentClass({vr:{default:!0},antialias:{default:!0},handleResize:{default:!0}},"WebGLRenderer");class g{constructor(){this.scene=null,this.camera=null}reset(){this.scene=null,this.camera=null}}class f extends t.System{execute(){this.queries.entities.removed.forEach(e=>{}),this.queries.entities.added.forEach(e=>{let t,n=e.getComponent(u);switch(n.primitive){case"torus":t=new s.TorusBufferGeometry(n.radius,n.tube,n.radialSegments,n.tubularSegments);break;case"sphere":t=new s.IcosahedronBufferGeometry(n.radius,1);break;case"box":t=new s.BoxBufferGeometry(n.width,n.height,n.depth)}let r="torus"===n.primitive?10066176:16777215*Math.random(),a=new s.MeshStandardMaterial({color:r,roughness:.7,metalness:0,flatShading:!0}),l=new s.Mesh(t,a);if(l.castShadow=!0,l.receiveShadow=!0,e.hasComponent(c)){let t=e.getComponent(c);l.position.copy(t.position),t.rotation&&l.rotation.set(t.rotation.x,t.rotation.y,t.rotation.z)}e.addComponent(o,{value:l}),e.hasComponent(i)&&e.getComponent(i).value.getComponent(o).value.add(l)})}}f.queries={entities:{components:[u],listen:{added:!0,removed:!0}}};var y=(new n.GLTFLoader).setPath("/assets/");class C extends t.System{execute(){var e=this.queries.entities.added;for(let n=0;n<e.length;n++){var t=e[n],s=t.getComponent(h);y.load(s.url,e=>{t.hasComponent(i)&&t.getComponent(i).value.add(e.scene),t.addComponent(o,{value:e.scene})})}}}C.queries={entities:{components:[h],listen:{added:!0}}};class w extends t.System{execute(){let e=this.queries.entities.results;for(var t=0;t<e.length;t++){var n=e[t],r=n.getComponent(a),i=new s.Group,l=new s.BoxBufferGeometry(100,100,100);if(l.scale(1,1,-1),"cubemap-stereo"===r.type){var d=b(r.textureUrl,12),c=[];for(t=0;t<6;t++)c.push(new s.MeshBasicMaterial({map:d[t]}));var u=new s.Mesh(l,c);u.layers.set(1),i.add(u);var h=[];for(t=6;t<12;t++)h.push(new s.MeshBasicMaterial({map:d[t]}));var m=new s.Mesh(l,h);m.layers.set(2),i.add(m),n.addComponent(o,{value:i})}else console.warn("Unknown skybox type: ",r.type)}}}function b(e,t){for(var n=[],r=0;r<t;r++)n[r]=new s.Texture;return(new s.ImageLoader).load(e,(function(e){for(var t,s,r=e.height,i=0;i<n.length;i++)s=(t=document.createElement("canvas")).getContext("2d"),t.height=r,t.width=r,s.drawImage(e,r*i,0,r,r,0,0,r,r),n[i].image=t,n[i].needsUpdate=!0})),n}w.queries={entities:{components:[a,t.Not(o)]}};class x extends t.System{processVisibility(e){e.forEach(e=>{e.getMutableComponent(o).value.visible=e.getComponent(l).value})}execute(){this.processVisibility(this.queries.entities.added),this.processVisibility(this.queries.entities.changed)}}x.queries={entities:{components:[l,o],listen:{added:!0,changed:[l]}}};class S{constructor(){this.renderer=null}}class E extends t.System{init(){window.addEventListener("resize",()=>{this.queries.renderers.results.forEach(e=>{var t=e.getMutableComponent(v);t.width=window.innerWidth,t.height=window.innerHeight})},!1)}execute(e){this.queries.uninitializedRenderers.results.forEach(e=>{var t=e.getComponent(v),n=new s.WebGLRenderer({antialias:t.antialias});n.setPixelRatio(window.devicePixelRatio),t.handleResize&&n.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(n.domElement),t.vr&&(n.vr.enabled=!0,document.body.appendChild(r.WEBVR.createButton(n,{referenceSpaceType:"local"}))),e.addComponent(S,{renderer:n})}),this.queries.renderers.changed.forEach(e=>{var t=e.getComponent(v),s=e.getComponent(S).renderer;t.width===s.width&&t.height===s.height||s.setSize(t.width,t.height)}),this.queries.renderers.results.forEach(e=>{var t=e.getComponent(S).renderer;this.queries.renderables.results.forEach(e=>{var s=e.getComponent(g),n=s.scene.getComponent(o).value,r=s.camera.getComponent(o).value;t.render(n,r)})})}}E.queries={uninitializedRenderers:{components:[v,t.Not(S)]},renderers:{components:[v,S],listen:{changed:[v]}},renderables:{components:[g]}};class q extends t.System{execute(e){let t=this.queries.parent.added;for(var s=0;s<t.length;s++){var n=t[s];console.log("Adding",s),n.getComponent(i).value.getComponent(o).value.add(n.getComponent(o).value)}}}q.queries={parent:{components:[i,o],listen:{added:!0}}};class M extends t.System{init(){window.addEventListener("resize",()=>{this.queries.cameras.results.forEach(e=>{e.getComponent(p).handleResize&&(e.getMutableComponent(p).aspect=window.innerWidth/window.innerHeight,console.log("Aspect updated"))})},!1)}execute(e){let t=this.queries.cameras.changed;for(var n=0;n<t.length;n++){var r=(l=t[n]).getComponent(p),i=l.getMutableComponent(o).value;i.aspect!==r.aspect&&(console.log("Camera Updated"),i.aspect=r.aspect,i.updateProjectionMatrix())}let a=this.queries.camerasUninitialized.results;for(n=0;n<a.length;n++){r=(l=a[n]).getComponent(p);var l,d=new s.PerspectiveCamera(r.fov,r.aspect,r.near,r.far);d.layers.enable(r.layers),l.addComponent(o,{value:d})}}}M.queries={camerasUninitialized:{components:[p,t.Not(o)]},cameras:{components:[p,o],listen:{changed:[p]}}};class R extends t.System{init(){this.initialized=!1;var e=new s.FontLoader;this.font=null,e.load("/assets/fonts/helvetiker_regular.typeface.json",e=>{this.font=e,this.initialized=!0})}execute(){this.font&&(this.queries.entities.changed.forEach(e=>{var t=e.getComponent(m),n=new s.TextGeometry(t.text,{font:this.font,size:1,height:.1,curveSegments:3,bevelEnabled:!0,bevelThickness:.03,bevelSize:.03,bevelOffset:0,bevelSegments:3});e.getMutableComponent(o).value.geometry=n}),this.queries.entities.added.forEach(e=>{var t=e.getComponent(m),n=new s.TextGeometry(t.text,{font:this.font,size:1,height:.1,curveSegments:3,bevelEnabled:!0,bevelThickness:.03,bevelSize:.03,bevelOffset:0,bevelSegments:3});Math.random();var r=new s.MeshStandardMaterial({color:16777215,roughness:.7,metalness:0}),i=new s.Mesh(n,r);e.addComponent(o,{value:i})}))}}function T(e){e.registerSystem(q).registerSystem(M).registerSystem(E,{priority:1})}R.queries={entities:{components:[m],listen:{added:!0,changed:!0}}},e.Active=class{constructor(){this.reset()}reset(){this.value=!1}},e.Camera=p,e.CameraRig=class{constructor(){this.reset()}reset(){this.leftHand=null,this.rightHand=null,this.camera=null}},e.CameraSystem=M,e.Draggable=class{constructor(){this.reset()}reset(){this.value=!1}},e.Dragging=d,e.GLTFLoaderSystem=C,e.GLTFModel=h,e.Geometry=u,e.GeometrySystem=f,e.Material=class{constructor(){this.color=16711680}},e.Object3D=o,e.Parent=i,e.Scene=class{constructor(){this.scene=null}reset(){this.scene=null}},e.Sky=class{constructor(){}reset(){}},e.SkyBox=a,e.SkyBoxSystem=w,e.TextGeometry=m,e.TextGeometrySystem=R,e.Transform=c,e.TransformSystem=q,e.VRController=class{constructor(){this.id=0,this.controller=null}reset(){}},e.VisibilitySystem=x,e.Visible=l,e.WebGLRendererSystem=E,e.init=T,e.initializeDefault=function(e=new t.World){T(e);let n=e.createEntity().addComponent(o,{value:new s.Scene}),r=e.createEntity().addComponent(v),i=e.createEntity().addComponent(p,{fov:90,aspect:window.innerWidth/window.innerHeight,near:1,far:1e3,layers:1,handleResize:!0}),a=e.createEntity().addComponent(g,{scene:n,camera:i});return{world:e,entities:{scene:n,camera:i,renderer:r,renderables:a}}},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNzeS10aHJlZS5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21wb25lbnRzL1BhcmVudC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL1NreWJveC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL09iamVjdDNELmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvVmlzaWJsZS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL0RyYWdnaW5nLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvVHJhbnNmb3JtLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvR2VvbWV0cnkuanMiLCIuLi9zcmMvY29tcG9uZW50cy9HTFRGTW9kZWwuanMiLCIuLi9zcmMvY29tcG9uZW50cy9UZXh0R2VvbWV0cnkuanMiLCIuLi9zcmMvY29tcG9uZW50cy9pbmRleC5qcyIsIi4uL3NyYy9zeXN0ZW1zL0dlb21ldHJ5U3lzdGVtLmpzIiwiLi4vc3JjL3N5c3RlbXMvR0xURkxvYWRlclN5c3RlbS5qcyIsIi4uL3NyYy9zeXN0ZW1zL1NreUJveFN5c3RlbS5qcyIsIi4uL3NyYy9zeXN0ZW1zL1Zpc2liaWxpdHlTeXN0ZW0uanMiLCIuLi9zcmMvc3lzdGVtcy9XZWJHTFJlbmRlcmVyU3lzdGVtLmpzIiwiLi4vc3JjL3N5c3RlbXMvVHJhbnNmb3JtU3lzdGVtLmpzIiwiLi4vc3JjL3N5c3RlbXMvQ2FtZXJhU3lzdGVtLmpzIiwiLi4vc3JjL3N5c3RlbXMvVGV4dEdlb21ldHJ5U3lzdGVtLmpzIiwiLi4vc3JjL2luZGV4LmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvQWN0aXZlLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvQ2FtZXJhUmlnLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvRHJhZ2dhYmxlLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvTWF0ZXJpYWwuanMiLCIuLi9zcmMvY29tcG9uZW50cy9TY2VuZS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL1NreS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL1ZSQ29udHJvbGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgUGFyZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy52YWx1ZSA9IG51bGw7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIFNreUJveCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudGV4dHVyZSA9ICcnO1xuICAgIHRoaXMudHlwZSA9ICcnO1xuICB9XG4gIHJlc2V0KCkge1xuICAgIHRoaXMudGV4dHVyZSA9ICcnO1xuICAgIHRoaXMudHlwZSA9ICcnO1xuICB9XG59IiwiZXhwb3J0IGNsYXNzIE9iamVjdDNEIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy52YWx1ZSA9IG51bGw7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIFZpc2libGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnZhbHVlID0gZmFsc2U7XG4gIH1cbn1cblxuIiwiaW1wb3J0IHsgVGFnQ29tcG9uZW50IH0gZnJvbSBcImVjc3lcIjtcbmV4cG9ydCBjbGFzcyBEcmFnZ2luZyBleHRlbmRzIFRhZ0NvbXBvbmVudCB7fVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlXCI7XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICB0aGlzLnJvdGF0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgfVxuXG4gIGNvcHkoc3JjKSB7XG4gICAgdGhpcy5wb3NpdGlvbi5jb3B5KHNyYy5wb3NpdGlvbik7XG4gICAgdGhpcy5yb3RhdGlvbi5jb3B5KHNyYy5yb3RhdGlvbik7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnBvc2l0aW9uLnNldCgwLCAwLCAwKTtcbiAgICB0aGlzLnJvdGF0aW9uLnNldCgwLCAwLCAwKTtcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEdlb21ldHJ5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5wcmltaXRpdmUgPSBcImJveFwiO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5wcmltaXRpdmUgPSBcImJveFwiO1xuICB9XG59IiwiZXhwb3J0IGNsYXNzIEdMVEZNb2RlbCB7fVxuIiwiZXhwb3J0IGNsYXNzIFRleHRHZW9tZXRyeSB7XG4gIHJlc2V0KCkge31cbn1cbiIsImltcG9ydCB7IGNyZWF0ZUNvbXBvbmVudENsYXNzIH0gZnJvbSBcImVjc3lcIjtcblxuZXhwb3J0IHsgU2NlbmUgfSBmcm9tIFwiLi9TY2VuZS5qc1wiO1xuZXhwb3J0IHsgUGFyZW50wqB9IGZyb20gXCIuL1BhcmVudC5qc1wiO1xuZXhwb3J0IHsgU2t5Qm94IH0gZnJvbSBcIi4vU2t5Ym94LmpzXCI7XG5leHBvcnQgeyBPYmplY3QzRCB9IGZyb20gXCIuL09iamVjdDNELmpzXCI7XG5leHBvcnQgeyBWaXNpYmxlIH0gZnJvbSBcIi4vVmlzaWJsZS5qc1wiO1xuZXhwb3J0IHsgQ2FtZXJhUmlnIH0gZnJvbSBcIi4vQ2FtZXJhUmlnLmpzXCI7XG5leHBvcnQgeyBEcmFnZ2FibGUgfSBmcm9tIFwiLi9EcmFnZ2FibGUuanNcIjtcbmV4cG9ydCB7IERyYWdnaW5nIH0gZnJvbSBcIi4vRHJhZ2dpbmcuanNcIjtcbmV4cG9ydCB7IEFjdGl2ZSB9IGZyb20gXCIuL0FjdGl2ZS5qc1wiO1xuZXhwb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSBcIi4vVHJhbnNmb3JtLmpzXCI7XG5leHBvcnQgeyBHZW9tZXRyeSB9IGZyb20gXCIuL0dlb21ldHJ5LmpzXCI7XG5leHBvcnQgeyBHTFRGTW9kZWwgfSBmcm9tIFwiLi9HTFRGTW9kZWwuanNcIjtcbmV4cG9ydCB7IFRleHRHZW9tZXRyeSB9IGZyb20gXCIuL1RleHRHZW9tZXRyeS5qc1wiO1xuZXhwb3J0IHsgVlJDb250cm9sbGVyIH0gZnJvbSBcIi4vVlJDb250cm9sbGVyLmpzXCI7XG5leHBvcnQgeyBNYXRlcmlhbCB9IGZyb20gXCIuL01hdGVyaWFsLmpzXCI7XG5leHBvcnQgeyBTa3kgfSBmcm9tIFwiLi9Ta3kuanNcIjtcblxuZXhwb3J0IGNvbnN0IENhbWVyYSA9IGNyZWF0ZUNvbXBvbmVudENsYXNzKHtcbiAgZm92OiB7IGRlZmF1bHQ6IDQ1IH0sXG4gIGFzcGVjdDogeyBkZWZhdWx0OiAxIH0sXG4gIG5lYXI6IHsgZGVmYXVsdDogMSB9LFxuICBmYXI6IHsgZGVmYXVsdDogMTAwMCB9LFxuICBsYXllcnM6IHsgZGVmYXVsdDogMCB9LFxuICBoYW5kbGVSZXNpemU6IHsgZGVmYXVsdDogdHJ1ZSB9XG59LCBcIkNhbWVyYVwiKTtcblxuXG5leHBvcnQgY29uc3QgV2ViR0xSZW5kZXJlciA9IGNyZWF0ZUNvbXBvbmVudENsYXNzKHtcbiAgdnI6IHsgZGVmYXVsdDogdHJ1ZSB9LFxuICBhbnRpYWxpYXM6IHtkZWZhdWx0OiB0cnVlfSxcbiAgaGFuZGxlUmVzaXplOiB7IGRlZmF1bHQ6IHRydWUgfVxufSwgXCJXZWJHTFJlbmRlcmVyXCIpO1xuXG5leHBvcnQgY2xhc3MgUmVuZGVyYWJsZUdyb3VwIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zY2VuZSA9IG51bGw7XG4gICAgdGhpcy5jYW1lcmEgPSBudWxsO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5zY2VuZSA9IG51bGw7XG4gICAgdGhpcy5jYW1lcmEgPSBudWxsO1xuICB9XG59IiwiLyogZ2xvYmFsIFRIUkVFICovXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCB7IFN5c3RlbSB9IGZyb20gXCJlY3N5XCI7XG5pbXBvcnQge1xuICBHZW9tZXRyeSxcbiAgT2JqZWN0M0QsXG4gIFRyYW5zZm9ybSxcbi8vICBFbGVtZW50LFxuLy8gIERyYWdnYWJsZSxcbiAgUGFyZW50XG59IGZyb20gXCIuLi9jb21wb25lbnRzL2luZGV4LmpzXCI7XG5cbi8qKlxuICogQ3JlYXRlIGEgTWVzaCBiYXNlZCBvbiB0aGUgW0dlb21ldHJ5XSBjb21wb25lbnQgYW5kIGF0dGFjaCBpdCB0byB0aGUgZW50aXR5IHVzaW5nIGEgW09iamVjdDNEXSBjb21wb25lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEdlb21ldHJ5U3lzdGVtIGV4dGVuZHMgU3lzdGVtIHtcbiAgZXhlY3V0ZSgpIHtcbiAgICAvLyBSZW1vdmVkXG4gICAgdGhpcy5xdWVyaWVzLmVudGl0aWVzLnJlbW92ZWQuZm9yRWFjaChlbnRpdHkgPT4ge1xuICAgICAgLypcbiAgICAgIGxldCBvYmplY3QgPSBlbnRpdHkuZ2V0UmVtb3ZlZENvbXBvbmVudChPYmplY3QzRCkudmFsdWU7XG4gICAgICBsZXQgcGFyZW50ID0gZW50aXR5LmdldENvbXBvbmVudChQYXJlbnQsIHRydWUpLnZhbHVlO1xuICAgICAgcGFyZW50LmdldENvbXBvbmVudChPYmplY3QzRCkudmFsdWUucmVtb3ZlKG9iamVjdCk7XG4gICAgICAqL1xuICAgIH0pO1xuXG4gICAgLy8gQWRkZWRcbiAgICB0aGlzLnF1ZXJpZXMuZW50aXRpZXMuYWRkZWQuZm9yRWFjaChlbnRpdHkgPT4ge1xuICAgICAgbGV0IGNvbXBvbmVudCA9IGVudGl0eS5nZXRDb21wb25lbnQoR2VvbWV0cnkpO1xuXG4gICAgICBsZXQgZ2VvbWV0cnk7XG4gICAgICBzd2l0Y2ggKGNvbXBvbmVudC5wcmltaXRpdmUpIHtcbiAgICAgICAgY2FzZSBcInRvcnVzXCI6XG4gICAgICAgICAge1xuICAgICAgICAgICAgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuVG9ydXNCdWZmZXJHZW9tZXRyeShcbiAgICAgICAgICAgICAgY29tcG9uZW50LnJhZGl1cyxcbiAgICAgICAgICAgICAgY29tcG9uZW50LnR1YmUsXG4gICAgICAgICAgICAgIGNvbXBvbmVudC5yYWRpYWxTZWdtZW50cyxcbiAgICAgICAgICAgICAgY29tcG9uZW50LnR1YnVsYXJTZWdtZW50c1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzcGhlcmVcIjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBnZW9tZXRyeSA9IG5ldyBUSFJFRS5JY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KGNvbXBvbmVudC5yYWRpdXMsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImJveFwiOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJveEJ1ZmZlckdlb21ldHJ5KFxuICAgICAgICAgICAgICBjb21wb25lbnQud2lkdGgsXG4gICAgICAgICAgICAgIGNvbXBvbmVudC5oZWlnaHQsXG4gICAgICAgICAgICAgIGNvbXBvbmVudC5kZXB0aFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGxldCBjb2xvciA9XG4gICAgICAgIGNvbXBvbmVudC5wcmltaXRpdmUgPT09IFwidG9ydXNcIiA/IDB4OTk5OTAwIDogTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmO1xuXG4gICAgICBsZXQgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoe1xuICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgIHJvdWdobmVzczogMC43LFxuICAgICAgICBtZXRhbG5lc3M6IDAuMCxcbiAgICAgICAgZmxhdFNoYWRpbmc6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgb2JqZWN0ID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICAgIG9iamVjdC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICAgIG9iamVjdC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcblxuICAgICAgaWYgKGVudGl0eS5oYXNDb21wb25lbnQoVHJhbnNmb3JtKSkge1xuICAgICAgICBsZXQgdHJhbnNmb3JtID0gZW50aXR5LmdldENvbXBvbmVudChUcmFuc2Zvcm0pO1xuICAgICAgICBvYmplY3QucG9zaXRpb24uY29weSh0cmFuc2Zvcm0ucG9zaXRpb24pO1xuICAgICAgICBpZiAodHJhbnNmb3JtLnJvdGF0aW9uKSB7XG4gICAgICAgICAgb2JqZWN0LnJvdGF0aW9uLnNldChcbiAgICAgICAgICAgIHRyYW5zZm9ybS5yb3RhdGlvbi54LFxuICAgICAgICAgICAgdHJhbnNmb3JtLnJvdGF0aW9uLnksXG4gICAgICAgICAgICB0cmFuc2Zvcm0ucm90YXRpb24uelxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuLy8gICAgICBpZiAoZW50aXR5Lmhhc0NvbXBvbmVudChFbGVtZW50KSAmJiAhZW50aXR5Lmhhc0NvbXBvbmVudChEcmFnZ2FibGUpKSB7XG4vLyAgICAgICAgb2JqZWN0Lm1hdGVyaWFsLmNvbG9yLnNldCgweDMzMzMzMyk7XG4vLyAgICAgIH1cblxuICAgICAgZW50aXR5LmFkZENvbXBvbmVudChPYmplY3QzRCwgeyB2YWx1ZTogb2JqZWN0IH0pO1xuXG4gICAgICAvLyBAdG9kbyBSZW1vdmUgaXQhIGhpZXJhcmNoeSBzeXN0ZW0gd2lsbCB0YWtlIGNhcmUgb2YgaXRcbiAgICAgIGlmIChlbnRpdHkuaGFzQ29tcG9uZW50KFBhcmVudCkpIHtcbiAgICAgICAgZW50aXR5LmdldENvbXBvbmVudChQYXJlbnQpLnZhbHVlLmdldENvbXBvbmVudChPYmplY3QzRCkudmFsdWUuYWRkKG9iamVjdCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuR2VvbWV0cnlTeXN0ZW0ucXVlcmllcyA9IHtcbiAgZW50aXRpZXM6IHtcbiAgICBjb21wb25lbnRzOiBbR2VvbWV0cnldLCAvLyBAdG9kbyBUcmFuc2Zvcm06IEFzIG9wdGlvbmFsLCBob3cgdG8gZGVmaW5lIGl0P1xuICAgIGxpc3Rlbjoge1xuICAgICAgYWRkZWQ6IHRydWUsXG4gICAgICByZW1vdmVkOiB0cnVlXG4gICAgfVxuICB9XG59O1xuIiwiaW1wb3J0IHtHTFRGTG9hZGVyfSBmcm9tIFwidGhyZWUvZXhhbXBsZXMvanNtL2xvYWRlcnMvR0xURkxvYWRlci5qc1wiO1xuaW1wb3J0IHsgU3lzdGVtIH0gZnJvbSBcImVjc3lcIjtcbmltcG9ydCB7IFBhcmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL1BhcmVudC5qc1wiO1xuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9PYmplY3QzRC5qc1wiO1xuaW1wb3J0IHsgR0xURk1vZGVsIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvR0xURk1vZGVsLmpzXCI7XG5cbi8vIEB0b2RvIFVzZSBwYXJhbWV0ZXIgYW5kIGxvYWRlciBtYW5hZ2VyXG52YXIgbG9hZGVyID0gbmV3IEdMVEZMb2FkZXIoKS5zZXRQYXRoKFwiL2Fzc2V0cy9cIik7XG5cbmV4cG9ydCBjbGFzcyBHTFRGTG9hZGVyU3lzdGVtIGV4dGVuZHMgU3lzdGVtIHtcbiAgZXhlY3V0ZSgpIHtcbiAgICB2YXIgZW50aXRpZXMgPSB0aGlzLnF1ZXJpZXMuZW50aXRpZXMuYWRkZWQ7XG5cbiAgICAvL1F1ZXJpZXNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVudGl0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZW50aXR5ID0gZW50aXRpZXNbaV07XG4gICAgICB2YXIgY29tcG9uZW50ID0gZW50aXR5LmdldENvbXBvbmVudChHTFRGTW9kZWwpO1xuXG4gICAgICBsb2FkZXIubG9hZChjb21wb25lbnQudXJsLCBnbHRmID0+IHtcbiAgICAgICAgLypcbiAgICAgICAgZ2x0Zi5zY2VuZS50cmF2ZXJzZShmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgIGlmIChjaGlsZC5pc01lc2gpIHtcbiAgICAgICAgICAgIGNoaWxkLm1hdGVyaWFsLmVudk1hcCA9IGVudk1hcDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuKi9cbiAgICAgICAgLy8gQHRvZG8gUmVtb3ZlLCBoaWVyYXJjaHkgd2lsbCB0YWtlIGNhcmUgb2YgaXRcbiAgICAgICAgaWYgKGVudGl0eS5oYXNDb21wb25lbnQoUGFyZW50KSkge1xuICAgICAgICAgIGVudGl0eS5nZXRDb21wb25lbnQoUGFyZW50KS52YWx1ZS5hZGQoZ2x0Zi5zY2VuZSk7XG4gICAgICAgIH1cbiAgICAgICAgZW50aXR5LmFkZENvbXBvbmVudChPYmplY3QzRCwgeyB2YWx1ZTogZ2x0Zi5zY2VuZSB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5HTFRGTG9hZGVyU3lzdGVtLnF1ZXJpZXMgPSB7XG4gIGVudGl0aWVzOiB7XG4gICAgY29tcG9uZW50czogW0dMVEZNb2RlbF0sXG4gICAgbGlzdGVuOiB7XG4gICAgICBhZGRlZDogdHJ1ZVxuICAgIH1cbiAgfVxufTtcbiIsImltcG9ydCB7IFN5c3RlbSwgTm90IH0gZnJvbSBcImVjc3lcIjtcbmltcG9ydCB7IFNreUJveCwgT2JqZWN0M0QgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9pbmRleC5qc1wiO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlXCI7XG5cbmV4cG9ydCBjbGFzcyBTa3lCb3hTeXN0ZW0gZXh0ZW5kcyBTeXN0ZW0ge1xuICBleGVjdXRlKCkge1xuICAgIGxldCBlbnRpdGllcyA9IHRoaXMucXVlcmllcy5lbnRpdGllcy5yZXN1bHRzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW50aXRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBlbnRpdHkgPSBlbnRpdGllc1tpXTtcblxuICAgICAgdmFyIHNreWJveCA9IGVudGl0eS5nZXRDb21wb25lbnQoU2t5Qm94KTtcblxuICAgICAgdmFyIGdyb3VwID0gbmV3IFRIUkVFLkdyb3VwKCk7XG4gICAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94QnVmZmVyR2VvbWV0cnkoIDEwMCwgMTAwLCAxMDAgKTtcbiAgICAgIGdlb21ldHJ5LnNjYWxlKCAxLCAxLCAtIDEgKTtcblxuICAgICAgaWYgKHNreWJveC50eXBlID09PSAnY3ViZW1hcC1zdGVyZW8nKSB7XG4gICAgICAgIHZhciB0ZXh0dXJlcyA9IGdldFRleHR1cmVzRnJvbUF0bGFzRmlsZSggc2t5Ym94LnRleHR1cmVVcmwsIDEyICk7XG5cbiAgICAgICAgdmFyIG1hdGVyaWFscyA9IFtdO1xuXG4gICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG4gIFxuICAgICAgICAgIG1hdGVyaWFscy5wdXNoKCBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHsgbWFwOiB0ZXh0dXJlc1sgaSBdIH0gKSApO1xuICBcbiAgICAgICAgfVxuICBcbiAgICAgICAgdmFyIHNreUJveCA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWxzICk7XG4gICAgICAgIHNreUJveC5sYXllcnMuc2V0KCAxICk7XG4gICAgICAgIGdyb3VwLmFkZChza3lCb3gpO1xuICBcbiAgICAgICAgdmFyIG1hdGVyaWFsc1IgPSBbXTtcbiAgXG4gICAgICAgIGZvciAoIHZhciBpID0gNjsgaSA8IDEyOyBpICsrICkge1xuICBcbiAgICAgICAgICBtYXRlcmlhbHNSLnB1c2goIG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBtYXA6IHRleHR1cmVzWyBpIF0gfSApICk7XG4gIFxuICAgICAgICB9XG4gIFxuICAgICAgICB2YXIgc2t5Qm94UiA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWxzUiApO1xuICAgICAgICBza3lCb3hSLmxheWVycy5zZXQoIDIgKTtcbiAgICAgICAgZ3JvdXAuYWRkKHNreUJveFIpO1xuXG4gICAgICAgIGVudGl0eS5hZGRDb21wb25lbnQoT2JqZWN0M0QsIHsgdmFsdWU6IGdyb3VwIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdVbmtub3duIHNreWJveCB0eXBlOiAnLCBza3lib3gudHlwZSk7XG4gICAgICB9XG5cbiAgICB9XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBnZXRUZXh0dXJlc0Zyb21BdGxhc0ZpbGUoIGF0bGFzSW1nVXJsLCB0aWxlc051bSApIHtcblxuICB2YXIgdGV4dHVyZXMgPSBbXTtcblxuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aWxlc051bTsgaSArKyApIHtcblxuICAgIHRleHR1cmVzWyBpIF0gPSBuZXcgVEhSRUUuVGV4dHVyZSgpO1xuXG4gIH1cblxuICB2YXIgbG9hZGVyID0gbmV3IFRIUkVFLkltYWdlTG9hZGVyKCk7XG4gIGxvYWRlci5sb2FkKCBhdGxhc0ltZ1VybCwgZnVuY3Rpb24gKCBpbWFnZU9iaiApIHtcblxuICAgIHZhciBjYW52YXMsIGNvbnRleHQ7XG4gICAgdmFyIHRpbGVXaWR0aCA9IGltYWdlT2JqLmhlaWdodDtcblxuICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHRleHR1cmVzLmxlbmd0aDsgaSArKyApIHtcblxuICAgICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2NhbnZhcycgKTtcbiAgICAgIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCggJzJkJyApO1xuICAgICAgY2FudmFzLmhlaWdodCA9IHRpbGVXaWR0aDtcbiAgICAgIGNhbnZhcy53aWR0aCA9IHRpbGVXaWR0aDtcbiAgICAgIGNvbnRleHQuZHJhd0ltYWdlKCBpbWFnZU9iaiwgdGlsZVdpZHRoICogaSwgMCwgdGlsZVdpZHRoLCB0aWxlV2lkdGgsIDAsIDAsIHRpbGVXaWR0aCwgdGlsZVdpZHRoICk7XG4gICAgICB0ZXh0dXJlc1sgaSBdLmltYWdlID0gY2FudmFzO1xuICAgICAgdGV4dHVyZXNbIGkgXS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cbiAgICB9XG5cbiAgfSApO1xuXG4gIHJldHVybiB0ZXh0dXJlcztcblxufVxuXG5Ta3lCb3hTeXN0ZW0ucXVlcmllcyA9IHtcbiAgZW50aXRpZXM6IHtcbiAgICBjb21wb25lbnRzOiBbU2t5Qm94LCBOb3QoT2JqZWN0M0QpXVxuICB9XG59O1xuIiwiaW1wb3J0IHsgU3lzdGVtIH0gZnJvbSBcImVjc3lcIjtcbmltcG9ydCB7IFZpc2libGUsIE9iamVjdDNEIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvaW5kZXguanNcIjtcblxuZXhwb3J0IGNsYXNzIFZpc2liaWxpdHlTeXN0ZW0gZXh0ZW5kcyBTeXN0ZW0ge1xuICBwcm9jZXNzVmlzaWJpbGl0eShlbnRpdGllcykge1xuICAgIGVudGl0aWVzLmZvckVhY2goZW50aXR5ID0+IHtcbiAgICAgIGVudGl0eS5nZXRNdXRhYmxlQ29tcG9uZW50KE9iamVjdDNEKS52YWx1ZS52aXNpYmxlID0gZW50aXR5LmdldENvbXBvbmVudChcbiAgICAgICAgVmlzaWJsZVxuICAgICAgKS52YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4ZWN1dGUoKSB7XG4gICAgdGhpcy5wcm9jZXNzVmlzaWJpbGl0eSh0aGlzLnF1ZXJpZXMuZW50aXRpZXMuYWRkZWQpO1xuICAgIHRoaXMucHJvY2Vzc1Zpc2liaWxpdHkodGhpcy5xdWVyaWVzLmVudGl0aWVzLmNoYW5nZWQpO1xuICB9XG59XG5cblZpc2liaWxpdHlTeXN0ZW0ucXVlcmllcyA9IHtcbiAgZW50aXRpZXM6IHtcbiAgICBjb21wb25lbnRzOiBbVmlzaWJsZSwgT2JqZWN0M0RdLFxuICAgIGxpc3Rlbjoge1xuICAgICAgYWRkZWQ6IHRydWUsXG4gICAgICBjaGFuZ2VkOiBbVmlzaWJsZV1cbiAgICB9XG4gIH1cbn07XG4iLCJpbXBvcnQgeyBTeXN0ZW0sIE5vdCB9IGZyb20gXCJlY3N5XCI7XG5pbXBvcnQgeyBSZW5kZXJhYmxlR3JvdXAsIFdlYkdMUmVuZGVyZXIsIE9iamVjdDNEIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvaW5kZXguanNcIjtcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgV0VCVlIgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vdnIvV2ViVlIuanMnO1xuXG5jbGFzcyBXZWJHTFJlbmRlcmVyQ29udGV4dCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucmVuZGVyZXIgPSBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBXZWJHTFJlbmRlcmVyU3lzdGVtIGV4dGVuZHMgU3lzdGVtIHtcbiAgaW5pdCgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwicmVzaXplXCIsXG4gICAgICAoKSA9PiB7XG4gICAgICAgIHRoaXMucXVlcmllcy5yZW5kZXJlcnMucmVzdWx0cy5mb3JFYWNoKGVudGl0eSA9PiB7XG4gICAgICAgICAgdmFyIGNvbXBvbmVudCA9IGVudGl0eS5nZXRNdXRhYmxlQ29tcG9uZW50KFdlYkdMUmVuZGVyZXIpO1xuICAgICAgICAgIGNvbXBvbmVudC53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICAgIGNvbXBvbmVudC5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgZmFsc2VcbiAgICApO1xuICB9XG5cbiAgZXhlY3V0ZShkZWx0YSkge1xuICAgIC8vIFVuaW5pdGlhbGl6ZWQgcmVuZGVyZXJzXG4gICAgdGhpcy5xdWVyaWVzLnVuaW5pdGlhbGl6ZWRSZW5kZXJlcnMucmVzdWx0cy5mb3JFYWNoKGVudGl0eSA9PiB7XG4gICAgICB2YXIgY29tcG9uZW50ID0gZW50aXR5LmdldENvbXBvbmVudChXZWJHTFJlbmRlcmVyKTtcblxuICAgICAgdmFyIHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoe2FudGlhbGlhczogY29tcG9uZW50LmFudGlhbGlhc30pO1xuXG4gICAgICByZW5kZXJlci5zZXRQaXhlbFJhdGlvKCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyApO1xuICAgICAgaWYgKGNvbXBvbmVudC5oYW5kbGVSZXNpemUpIHtcblx0XHRcdFx0cmVuZGVyZXIuc2V0U2l6ZSggd2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCApO1xuICAgICAgfVxuXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCByZW5kZXJlci5kb21FbGVtZW50ICk7XG5cbiAgICAgIGlmIChjb21wb25lbnQudnIpIHtcbiAgICAgICAgcmVuZGVyZXIudnIuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoIFdFQlZSLmNyZWF0ZUJ1dHRvbiggcmVuZGVyZXIsIHsgcmVmZXJlbmNlU3BhY2VUeXBlOiAnbG9jYWwnIH0gKSApO1xuICAgICAgfVxuXG4gICAgICBlbnRpdHkuYWRkQ29tcG9uZW50KFdlYkdMUmVuZGVyZXJDb250ZXh0LCB7cmVuZGVyZXI6IHJlbmRlcmVyfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnF1ZXJpZXMucmVuZGVyZXJzLmNoYW5nZWQuZm9yRWFjaChlbnRpdHkgPT4ge1xuICAgICAgdmFyIGNvbXBvbmVudCA9IGVudGl0eS5nZXRDb21wb25lbnQoV2ViR0xSZW5kZXJlcik7XG4gICAgICB2YXIgcmVuZGVyZXIgPSBlbnRpdHkuZ2V0Q29tcG9uZW50KFdlYkdMUmVuZGVyZXJDb250ZXh0KS5yZW5kZXJlcjtcbiAgICAgIGlmIChjb21wb25lbnQud2lkdGggIT09IHJlbmRlcmVyLndpZHRoIHx8IGNvbXBvbmVudC5oZWlnaHQgIT09IHJlbmRlcmVyLmhlaWdodCkge1xuICAgICAgICByZW5kZXJlci5zZXRTaXplKCBjb21wb25lbnQud2lkdGgsIGNvbXBvbmVudC5oZWlnaHQgKTtcbiAgICAgICAgLy8gaW5uZXJXaWR0aC9pbm5lckhlaWdodFxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbGV0IHJlbmRlcmVycyA9IHRoaXMucXVlcmllcy5yZW5kZXJlcnMucmVzdWx0cztcbiAgICByZW5kZXJlcnMuZm9yRWFjaChyZW5kZXJlckVudGl0eSA9PiB7XG4gICAgICB2YXIgcmVuZGVyZXIgPSByZW5kZXJlckVudGl0eS5nZXRDb21wb25lbnQoV2ViR0xSZW5kZXJlckNvbnRleHQpLnJlbmRlcmVyO1xuICAgICAgdGhpcy5xdWVyaWVzLnJlbmRlcmFibGVzLnJlc3VsdHMuZm9yRWFjaChlbnRpdHkgPT4ge1xuICAgICAgICB2YXIgZ3JvdXAgPSBlbnRpdHkuZ2V0Q29tcG9uZW50KFJlbmRlcmFibGVHcm91cCk7XG4gICAgICAgIHZhciBzY2VuZSA9IGdyb3VwLnNjZW5lLmdldENvbXBvbmVudChPYmplY3QzRCkudmFsdWU7XG4gICAgICAgIHZhciBjYW1lcmEgPSBncm91cC5jYW1lcmEuZ2V0Q29tcG9uZW50KE9iamVjdDNEKS52YWx1ZTtcbiAgICAgICAgcmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuXG5XZWJHTFJlbmRlcmVyU3lzdGVtLnF1ZXJpZXMgPSB7XG4gIHVuaW5pdGlhbGl6ZWRSZW5kZXJlcnM6IHtcbiAgICBjb21wb25lbnRzOiBbV2ViR0xSZW5kZXJlciwgTm90KFdlYkdMUmVuZGVyZXJDb250ZXh0KV0sXG4gIH0sXG4gIHJlbmRlcmVyczoge1xuICAgIGNvbXBvbmVudHM6IFtXZWJHTFJlbmRlcmVyLCBXZWJHTFJlbmRlcmVyQ29udGV4dF0sXG4gICAgbGlzdGVuOiB7XG4gICAgICBjaGFuZ2VkOiBbV2ViR0xSZW5kZXJlcl1cbiAgICB9XG4gIH0sXG4gIHJlbmRlcmFibGVzOiB7XG4gICAgY29tcG9uZW50czogW1JlbmRlcmFibGVHcm91cF1cbiAgfVxufTtcbiIsImltcG9ydCB7IFN5c3RlbSwgTm90IH0gZnJvbSBcImVjc3lcIjtcbmltcG9ydCB7IFBhcmVudCwgT2JqZWN0M0QgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9pbmRleC5qc1wiO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlXCI7XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2Zvcm1TeXN0ZW0gZXh0ZW5kcyBTeXN0ZW0ge1xuICBleGVjdXRlKGRlbHRhKSB7XG4gICAgLy8gSGllcmFyY2h5XG4gICAgbGV0IGFkZGVkID0gdGhpcy5xdWVyaWVzLnBhcmVudC5hZGRlZDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFkZGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZW50aXR5ID0gYWRkZWRbaV07XG4gICAgICBjb25zb2xlLmxvZygnQWRkaW5nJywgaSk7XG4gICAgICB2YXIgcGFyZW50RW50aXR5ID0gZW50aXR5LmdldENvbXBvbmVudChQYXJlbnQpLnZhbHVlO1xuICAgICAgcGFyZW50RW50aXR5LmdldENvbXBvbmVudChPYmplY3QzRCkudmFsdWUuYWRkKGVudGl0eS5nZXRDb21wb25lbnQoT2JqZWN0M0QpLnZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuVHJhbnNmb3JtU3lzdGVtLnF1ZXJpZXMgPSB7XG4gIHBhcmVudDoge1xuICAgIGNvbXBvbmVudHM6IFtQYXJlbnQsIE9iamVjdDNEXSxcbiAgICBsaXN0ZW46IHtcbiAgICAgIGFkZGVkOiB0cnVlXG4gICAgfVxuICB9XG59O1xuIiwiaW1wb3J0IHsgU3lzdGVtLCBOb3QgfSBmcm9tIFwiZWNzeVwiO1xuaW1wb3J0IHsgQ2FtZXJhLCBPYmplY3QzRCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2luZGV4LmpzXCI7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tIFwidGhyZWVcIjtcblxuZXhwb3J0IGNsYXNzIENhbWVyYVN5c3RlbSBleHRlbmRzIFN5c3RlbSB7XG4gIGluaXQoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCAoKSA9PiB7XG4gICAgICB0aGlzLnF1ZXJpZXMuY2FtZXJhcy5yZXN1bHRzLmZvckVhY2goY2FtZXJhID0+IHtcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IGNhbWVyYS5nZXRDb21wb25lbnQoQ2FtZXJhKTtcbiAgICAgICAgaWYgKGNvbXBvbmVudC5oYW5kbGVSZXNpemUpIHtcbiAgICAgICAgICBjYW1lcmEuZ2V0TXV0YWJsZUNvbXBvbmVudChDYW1lcmEpLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdBc3BlY3QgdXBkYXRlZCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCBmYWxzZSApO1xuICB9XG5cbiAgZXhlY3V0ZShkZWx0YSkge1xuICAgIGxldCBjaGFuZ2VkID0gdGhpcy5xdWVyaWVzLmNhbWVyYXMuY2hhbmdlZDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYW5nZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBlbnRpdHkgPSBjaGFuZ2VkW2ldO1xuXG4gICAgICB2YXIgY29tcG9uZW50ID0gZW50aXR5LmdldENvbXBvbmVudChDYW1lcmEpO1xuICAgICAgdmFyIGNhbWVyYTNkID0gZW50aXR5LmdldE11dGFibGVDb21wb25lbnQoT2JqZWN0M0QpLnZhbHVlO1xuXG4gICAgICBpZiAoY2FtZXJhM2QuYXNwZWN0ICE9PSBjb21wb25lbnQuYXNwZWN0KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdDYW1lcmEgVXBkYXRlZCcpO1xuXG4gICAgICAgIGNhbWVyYTNkLmFzcGVjdCA9IGNvbXBvbmVudC5hc3BlY3Q7XG4gICAgICAgIGNhbWVyYTNkLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgIH1cbiAgICAgIC8vIEB0b2RvIERvIGl0IGZvciB0aGUgcmVzdCBvZiB0aGUgdmFsdWVzXG4gICAgfVxuXG5cbiAgICBsZXQgY2FtZXJhc1VuaW5pdGlhbGl6ZWQgPSB0aGlzLnF1ZXJpZXMuY2FtZXJhc1VuaW5pdGlhbGl6ZWQucmVzdWx0cztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbWVyYXNVbmluaXRpYWxpemVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZW50aXR5ID0gY2FtZXJhc1VuaW5pdGlhbGl6ZWRbaV07XG5cbiAgICAgIHZhciBjb21wb25lbnQgPSBlbnRpdHkuZ2V0Q29tcG9uZW50KENhbWVyYSk7XG5cbiAgICAgIHZhciBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoXG4gICAgICAgIGNvbXBvbmVudC5mb3YsXG4gICAgICAgIGNvbXBvbmVudC5hc3BlY3QsXG4gICAgICAgIGNvbXBvbmVudC5uZWFyLFxuICAgICAgICBjb21wb25lbnQuZmFyICk7XG5cbiAgICAgIGNhbWVyYS5sYXllcnMuZW5hYmxlKCBjb21wb25lbnQubGF5ZXJzICk7XG5cbiAgICAgIGVudGl0eS5hZGRDb21wb25lbnQoT2JqZWN0M0QsIHsgdmFsdWU6IGNhbWVyYSB9KTtcbiAgICB9XG4gIH1cbn1cblxuQ2FtZXJhU3lzdGVtLnF1ZXJpZXMgPSB7XG4gIGNhbWVyYXNVbmluaXRpYWxpemVkOiB7XG4gICAgY29tcG9uZW50czogW0NhbWVyYSwgTm90KE9iamVjdDNEKV1cbiAgfSxcbiAgY2FtZXJhczoge1xuICAgIGNvbXBvbmVudHM6IFtDYW1lcmEsIE9iamVjdDNEXSxcbiAgICBsaXN0ZW46IHtcbiAgICAgIGNoYW5nZWQ6IFtDYW1lcmFdXG4gICAgfVxuICB9XG59O1xuIiwiLyogZ2xvYmFsIFRIUkVFICovXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCB7IFN5c3RlbSB9IGZyb20gXCJlY3N5XCI7XG5pbXBvcnQge1xuICBUZXh0R2VvbWV0cnksXG4gIE9iamVjdDNEXG59IGZyb20gXCIuLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgY2xhc3MgVGV4dEdlb21ldHJ5U3lzdGVtIGV4dGVuZHMgU3lzdGVtIHtcbiAgaW5pdCgpIHtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdmFyIGxvYWRlciA9IG5ldyBUSFJFRS5Gb250TG9hZGVyKCk7XG4gICAgdGhpcy5mb250ID0gbnVsbDtcbiAgICBsb2FkZXIubG9hZChcIi9hc3NldHMvZm9udHMvaGVsdmV0aWtlcl9yZWd1bGFyLnR5cGVmYWNlLmpzb25cIiwgZm9udCA9PiB7XG4gICAgICB0aGlzLmZvbnQgPSBmb250O1xuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgfSk7XG4gIH1cblxuICBleGVjdXRlKCkge1xuICAgIGlmICghdGhpcy5mb250KSByZXR1cm47XG5cbiAgICB2YXIgY2hhbmdlZCA9IHRoaXMucXVlcmllcy5lbnRpdGllcy5jaGFuZ2VkO1xuICAgIGNoYW5nZWQuZm9yRWFjaChlbnRpdHkgPT4ge1xuICAgICAgdmFyIHRleHRDb21wb25lbnQgPSBlbnRpdHkuZ2V0Q29tcG9uZW50KFRleHRHZW9tZXRyeSk7XG4gICAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuVGV4dEdlb21ldHJ5KHRleHRDb21wb25lbnQudGV4dCwge1xuICAgICAgICBmb250OiB0aGlzLmZvbnQsXG4gICAgICAgIHNpemU6IDEsXG4gICAgICAgIGhlaWdodDogMC4xLFxuICAgICAgICBjdXJ2ZVNlZ21lbnRzOiAzLFxuICAgICAgICBiZXZlbEVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGJldmVsVGhpY2tuZXNzOiAwLjAzLFxuICAgICAgICBiZXZlbFNpemU6IDAuMDMsXG4gICAgICAgIGJldmVsT2Zmc2V0OiAwLFxuICAgICAgICBiZXZlbFNlZ21lbnRzOiAzXG4gICAgICB9KTtcbiAgICAgIHZhciBvYmplY3QgPSBlbnRpdHkuZ2V0TXV0YWJsZUNvbXBvbmVudChPYmplY3QzRCkudmFsdWU7XG4gICAgICBvYmplY3QuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcbiAgICB9KTtcblxuICAgIHZhciBhZGRlZCA9IHRoaXMucXVlcmllcy5lbnRpdGllcy5hZGRlZDtcbiAgICBhZGRlZC5mb3JFYWNoKGVudGl0eSA9PiB7XG4gICAgICB2YXIgdGV4dENvbXBvbmVudCA9IGVudGl0eS5nZXRDb21wb25lbnQoVGV4dEdlb21ldHJ5KTtcbiAgICAgIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5UZXh0R2VvbWV0cnkodGV4dENvbXBvbmVudC50ZXh0LCB7XG4gICAgICAgIGZvbnQ6IHRoaXMuZm9udCxcbiAgICAgICAgc2l6ZTogMSxcbiAgICAgICAgaGVpZ2h0OiAwLjEsXG4gICAgICAgIGN1cnZlU2VnbWVudHM6IDMsXG4gICAgICAgIGJldmVsRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgYmV2ZWxUaGlja25lc3M6IDAuMDMsXG4gICAgICAgIGJldmVsU2l6ZTogMC4wMyxcbiAgICAgICAgYmV2ZWxPZmZzZXQ6IDAsXG4gICAgICAgIGJldmVsU2VnbWVudHM6IDNcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY29sb3IgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmY7XG4gICAgICBjb2xvciA9IDB4ZmZmZmZmO1xuICAgICAgdmFyIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsKHtcbiAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICByb3VnaG5lc3M6IDAuNyxcbiAgICAgICAgbWV0YWxuZXNzOiAwLjBcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG5cbiAgICAgIGVudGl0eS5hZGRDb21wb25lbnQoT2JqZWN0M0QsIHsgdmFsdWU6IG1lc2ggfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuVGV4dEdlb21ldHJ5U3lzdGVtLnF1ZXJpZXMgPSB7XG4gIGVudGl0aWVzOiB7XG4gICAgY29tcG9uZW50czogW1RleHRHZW9tZXRyeV0sXG4gICAgbGlzdGVuOiB7XG4gICAgICBhZGRlZDogdHJ1ZSxcbiAgICAgIGNoYW5nZWQ6IHRydWVcbiAgICB9XG4gIH1cbn07XG4iLCJpbXBvcnQgKiBhcyBFQ1NZIGZyb20gXCJlY3N5XCI7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tIFwidGhyZWVcIjtcblxuLy8gY29tcG9uZW50c1xuZXhwb3J0IHtcbiAgU2t5Qm94LFxuICBPYmplY3QzRCxcbiAgVmlzaWJsZSxcbiAgQ2FtZXJhUmlnLFxuICBEcmFnZ2FibGUsXG4gIERyYWdnaW5nLFxuICBBY3RpdmUsXG4gIFRyYW5zZm9ybSxcbiAgR2VvbWV0cnksXG4gIFNjZW5lLFxuICBDYW1lcmEsXG4gIFBhcmVudCxcbiAgR0xURk1vZGVsLFxuICBUZXh0R2VvbWV0cnksXG4gIFZSQ29udHJvbGxlcixcbiAgTWF0ZXJpYWwsXG4gIFNreSB9IGZyb20gXCIuL2NvbXBvbmVudHMvaW5kZXguanNcIjtcblxuLy8gc3lzdGVtc1xuZXhwb3J0IHsgR2VvbWV0cnlTeXN0ZW0gfSBmcm9tIFwiLi9zeXN0ZW1zL0dlb21ldHJ5U3lzdGVtLmpzXCI7XG5leHBvcnQgeyBHTFRGTG9hZGVyU3lzdGVtIH0gZnJvbSBcIi4vc3lzdGVtcy9HTFRGTG9hZGVyU3lzdGVtLmpzXCI7XG5leHBvcnQgeyBTa3lCb3hTeXN0ZW0gfSBmcm9tIFwiLi9zeXN0ZW1zL1NreUJveFN5c3RlbS5qc1wiO1xuZXhwb3J0IHsgVmlzaWJpbGl0eVN5c3RlbSB9IGZyb20gXCIuL3N5c3RlbXMvVmlzaWJpbGl0eVN5c3RlbS5qc1wiO1xuZXhwb3J0IHsgV2ViR0xSZW5kZXJlclN5c3RlbSB9IGZyb20gXCIuL3N5c3RlbXMvV2ViR0xSZW5kZXJlclN5c3RlbS5qc1wiO1xuZXhwb3J0IHsgVHJhbnNmb3JtU3lzdGVtIH0gZnJvbSBcIi4vc3lzdGVtcy9UcmFuc2Zvcm1TeXN0ZW0uanNcIjtcbmV4cG9ydCB7IENhbWVyYVN5c3RlbSB9IGZyb20gXCIuL3N5c3RlbXMvQ2FtZXJhU3lzdGVtLmpzXCI7XG5leHBvcnQgeyBUZXh0R2VvbWV0cnlTeXN0ZW0gfSBmcm9tIFwiLi9zeXN0ZW1zL1RleHRHZW9tZXRyeVN5c3RlbS5qc1wiO1xuXG5pbXBvcnQgeyBUcmFuc2Zvcm1TeXN0ZW0gfSBmcm9tIFwiLi9zeXN0ZW1zL1RyYW5zZm9ybVN5c3RlbS5qc1wiO1xuaW1wb3J0IHsgQ2FtZXJhU3lzdGVtIH0gZnJvbSBcIi4vc3lzdGVtcy9DYW1lcmFTeXN0ZW0uanNcIjtcbmltcG9ydCB7IFdlYkdMUmVuZGVyZXJTeXN0ZW0gfSBmcm9tIFwiLi9zeXN0ZW1zL1dlYkdMUmVuZGVyZXJTeXN0ZW0uanNcIjtcbmltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSBcIi4vY29tcG9uZW50cy9PYmplY3QzRC5qc1wiO1xuaW1wb3J0IHsgV2ViR0xSZW5kZXJlciwgUmVuZGVyYWJsZUdyb3VwLCBDYW1lcmEgfSBmcm9tIFwiLi9jb21wb25lbnRzL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KHdvcmxkKSB7XG4gIHdvcmxkXG4gICAgLnJlZ2lzdGVyU3lzdGVtKFRyYW5zZm9ybVN5c3RlbSlcbiAgICAucmVnaXN0ZXJTeXN0ZW0oQ2FtZXJhU3lzdGVtKVxuICAgIC5yZWdpc3RlclN5c3RlbShXZWJHTFJlbmRlcmVyU3lzdGVtLCB7cHJpb3JpdHk6IDF9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVEZWZhdWx0KHdvcmxkID0gbmV3IEVDU1kuV29ybGQoKSkge1xuICBpbml0KHdvcmxkKTtcblxuICBsZXQgc2NlbmUgPSB3b3JsZC5jcmVhdGVFbnRpdHkoKS5hZGRDb21wb25lbnQoT2JqZWN0M0QgLyogU2NlbmUgKi8sIHt2YWx1ZTogbmV3IFRIUkVFLlNjZW5lKCl9KTtcbiAgbGV0IHJlbmRlcmVyID0gd29ybGQuY3JlYXRlRW50aXR5KCkuYWRkQ29tcG9uZW50KFdlYkdMUmVuZGVyZXIpO1xuICBsZXQgY2FtZXJhID0gd29ybGQuY3JlYXRlRW50aXR5KCkuYWRkQ29tcG9uZW50KENhbWVyYSwge1xuICAgIGZvdjogOTAsXG4gICAgYXNwZWN0OiB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCxcbiAgICBuZWFyOiAxLFxuICAgIGZhcjogMTAwMCxcbiAgICBsYXllcnM6IDEsXG4gICAgaGFuZGxlUmVzaXplOiB0cnVlXG4gIH0pO1xuXG4gIGxldCByZW5kZXJhYmxlcyA9IHdvcmxkLmNyZWF0ZUVudGl0eSgpLmFkZENvbXBvbmVudChSZW5kZXJhYmxlR3JvdXAsIHtcbiAgICBzY2VuZTogc2NlbmUsXG4gICAgY2FtZXJhOiBjYW1lcmFcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICB3b3JsZCxcbiAgICBlbnRpdGllczoge1xuICAgICAgc2NlbmUsXG4gICAgICBjYW1lcmEsXG4gICAgICByZW5kZXJlcixcbiAgICAgIHJlbmRlcmFibGVzXG4gICAgfVxuICB9O1xufSIsImV4cG9ydCBjbGFzcyBBY3RpdmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnZhbHVlID0gZmFsc2U7XG4gIH1cbn1cblxuIiwiZXhwb3J0IGNsYXNzIENhbWVyYVJpZyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMubGVmdEhhbmQgPSBudWxsO1xuICAgIHRoaXMucmlnaHRIYW5kID0gbnVsbDtcbiAgICB0aGlzLmNhbWVyYSA9IG51bGw7XG4gIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBEcmFnZ2FibGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnZhbHVlID0gZmFsc2U7XG4gIH1cbn1cblxuIiwiZXhwb3J0IGNsYXNzIE1hdGVyaWFsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb2xvciA9IDB4ZmYwMDAwO1xuICB9XG59XG4iLCJleHBvcnQgY2xhc3MgU2NlbmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnNjZW5lID0gbnVsbDtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuc2NlbmUgPSBudWxsO1xuICB9XG59XG4iLCJleHBvcnQgY2xhc3MgU2t5IHtcbiAgY29uc3RydWN0b3IoKSB7fVxuICByZXNldCgpIHt9XG59XG4iLCJleHBvcnQgY2xhc3MgVlJDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pZCA9IDA7XG4gICAgdGhpcy5jb250cm9sbGVyID0gbnVsbDtcbiAgfVxuICByZXNldCgpIHt9XG59XG4iXSwibmFtZXMiOlsiUGFyZW50IiwiW29iamVjdCBPYmplY3RdIiwidGhpcyIsInZhbHVlIiwiU2t5Qm94IiwidGV4dHVyZSIsInR5cGUiLCJPYmplY3QzRCIsIlZpc2libGUiLCJyZXNldCIsIkRyYWdnaW5nIiwiVGFnQ29tcG9uZW50IiwiVHJhbnNmb3JtIiwicG9zaXRpb24iLCJUSFJFRS5WZWN0b3IzIiwicm90YXRpb24iLCJzcmMiLCJjb3B5Iiwic2V0IiwiR2VvbWV0cnkiLCJwcmltaXRpdmUiLCJHTFRGTW9kZWwiLCJUZXh0R2VvbWV0cnkiLCJDYW1lcmEiLCJjcmVhdGVDb21wb25lbnRDbGFzcyIsImZvdiIsImRlZmF1bHQiLCJhc3BlY3QiLCJuZWFyIiwiZmFyIiwibGF5ZXJzIiwiaGFuZGxlUmVzaXplIiwiV2ViR0xSZW5kZXJlciIsInZyIiwiYW50aWFsaWFzIiwiUmVuZGVyYWJsZUdyb3VwIiwic2NlbmUiLCJjYW1lcmEiLCJHZW9tZXRyeVN5c3RlbSIsIlN5c3RlbSIsInF1ZXJpZXMiLCJlbnRpdGllcyIsInJlbW92ZWQiLCJmb3JFYWNoIiwiZW50aXR5IiwiYWRkZWQiLCJnZW9tZXRyeSIsImNvbXBvbmVudCIsImdldENvbXBvbmVudCIsIlRIUkVFLlRvcnVzQnVmZmVyR2VvbWV0cnkiLCJyYWRpdXMiLCJ0dWJlIiwicmFkaWFsU2VnbWVudHMiLCJ0dWJ1bGFyU2VnbWVudHMiLCJUSFJFRS5JY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5IiwiVEhSRUUuQm94QnVmZmVyR2VvbWV0cnkiLCJ3aWR0aCIsImhlaWdodCIsImRlcHRoIiwiY29sb3IiLCJNYXRoIiwicmFuZG9tIiwibWF0ZXJpYWwiLCJUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCIsInJvdWdobmVzcyIsIm1ldGFsbmVzcyIsImZsYXRTaGFkaW5nIiwib2JqZWN0IiwiVEhSRUUuTWVzaCIsImNhc3RTaGFkb3ciLCJyZWNlaXZlU2hhZG93IiwiaGFzQ29tcG9uZW50IiwidHJhbnNmb3JtIiwieCIsInkiLCJ6IiwiYWRkQ29tcG9uZW50IiwiYWRkIiwiY29tcG9uZW50cyIsImxpc3RlbiIsImxvYWRlciIsIkdMVEZMb2FkZXIiLCJzZXRQYXRoIiwiR0xURkxvYWRlclN5c3RlbSIsImkiLCJsZW5ndGgiLCJsb2FkIiwidXJsIiwiZ2x0ZiIsIlNreUJveFN5c3RlbSIsInJlc3VsdHMiLCJza3lib3giLCJncm91cCIsIlRIUkVFLkdyb3VwIiwic2NhbGUiLCJ0ZXh0dXJlcyIsImdldFRleHR1cmVzRnJvbUF0bGFzRmlsZSIsInRleHR1cmVVcmwiLCJtYXRlcmlhbHMiLCJwdXNoIiwiVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwiLCJtYXAiLCJza3lCb3giLCJtYXRlcmlhbHNSIiwic2t5Qm94UiIsImNvbnNvbGUiLCJ3YXJuIiwiYXRsYXNJbWdVcmwiLCJ0aWxlc051bSIsIlRIUkVFLlRleHR1cmUiLCJUSFJFRS5JbWFnZUxvYWRlciIsImltYWdlT2JqIiwiY2FudmFzIiwiY29udGV4dCIsInRpbGVXaWR0aCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImdldENvbnRleHQiLCJkcmF3SW1hZ2UiLCJpbWFnZSIsIm5lZWRzVXBkYXRlIiwiTm90IiwiVmlzaWJpbGl0eVN5c3RlbSIsImdldE11dGFibGVDb21wb25lbnQiLCJ2aXNpYmxlIiwicHJvY2Vzc1Zpc2liaWxpdHkiLCJjaGFuZ2VkIiwiV2ViR0xSZW5kZXJlckNvbnRleHQiLCJyZW5kZXJlciIsIldlYkdMUmVuZGVyZXJTeXN0ZW0iLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicmVuZGVyZXJzIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiZGVsdGEiLCJ1bmluaXRpYWxpemVkUmVuZGVyZXJzIiwiVEhSRUUuV2ViR0xSZW5kZXJlciIsInNldFBpeGVsUmF0aW8iLCJkZXZpY2VQaXhlbFJhdGlvIiwic2V0U2l6ZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImRvbUVsZW1lbnQiLCJlbmFibGVkIiwiV0VCVlIiLCJjcmVhdGVCdXR0b24iLCJyZWZlcmVuY2VTcGFjZVR5cGUiLCJyZW5kZXJlckVudGl0eSIsInJlbmRlcmFibGVzIiwicmVuZGVyIiwiVHJhbnNmb3JtU3lzdGVtIiwicGFyZW50IiwibG9nIiwiQ2FtZXJhU3lzdGVtIiwiY2FtZXJhcyIsImNhbWVyYTNkIiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsImNhbWVyYXNVbmluaXRpYWxpemVkIiwiVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEiLCJlbmFibGUiLCJUZXh0R2VvbWV0cnlTeXN0ZW0iLCJpbml0aWFsaXplZCIsIlRIUkVFLkZvbnRMb2FkZXIiLCJmb250IiwidGV4dENvbXBvbmVudCIsIlRIUkVFLlRleHRHZW9tZXRyeSIsInRleHQiLCJzaXplIiwiY3VydmVTZWdtZW50cyIsImJldmVsRW5hYmxlZCIsImJldmVsVGhpY2tuZXNzIiwiYmV2ZWxTaXplIiwiYmV2ZWxPZmZzZXQiLCJiZXZlbFNlZ21lbnRzIiwibWVzaCIsImluaXQiLCJ3b3JsZCIsInJlZ2lzdGVyU3lzdGVtIiwicHJpb3JpdHkiLCJsZWZ0SGFuZCIsInJpZ2h0SGFuZCIsImlkIiwiY29udHJvbGxlciIsIkVDU1kuV29ybGQiLCJjcmVhdGVFbnRpdHkiLCJUSFJFRS5TY2VuZSJdLCJtYXBwaW5ncyI6InlpQkFBTyxNQUFNQSxFQUNYQyxjQUNFQyxLQUFLQyxNQUFRLEtBR2ZGLFFBQ0VDLEtBQUtDLE1BQVEsTUNOVixNQUFNQyxFQUNYSCxjQUNFQyxLQUFLRyxRQUFVLEdBQ2ZILEtBQUtJLEtBQU8sR0FFZEwsUUFDRUMsS0FBS0csUUFBVSxHQUNmSCxLQUFLSSxLQUFPLFVDUEhDLEVBQ1hOLGNBQ0VDLEtBQUtDLE1BQVEsS0FHZkYsUUFDRUMsS0FBS0MsTUFBUSxNQ05WLE1BQU1LLEVBQ1hQLGNBQ0VDLEtBQUtPLFFBR1BSLFFBQ0VDLEtBQUtDLE9BQVEsR0NMVixNQUFNTyxVQUFpQkMsZ0JDQ3ZCLE1BQU1DLEVBQ1hYLGNBQ0VDLEtBQUtXLFNBQVcsSUFBSUMsVUFDcEJaLEtBQUthLFNB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
