!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("ecsy"),require("three"),require("three/examples/jsm/loaders/GLTFLoader.js"),require("three/examples/jsm/webxr/VRButton.js"),require("three/examples/jsm/webxr/ARButton.js")):"function"==typeof define&&define.amd?define(["exports","ecsy","three","three/examples/jsm/loaders/GLTFLoader.js","three/examples/jsm/webxr/VRButton.js","three/examples/jsm/webxr/ARButton.js"],t):(e=e||self,function(){var s=e.ECSYTHREE,n=e.ECSYTHREE={};t(n,e.ECSY,e.THREE,e.GLTFLoader_js,e.VRButton_js,e.ARButton_js),n.noConflict=function(){return e.ECSYTHREE=s,n}}())}(this,(function(e,t,s,n,o,i){"use strict";class r{constructor(){this.reset()}reset(){this.value=!1}}class a{constructor(){this.fov=45,this.aspect=1,this.near=1,this.far=1e3,this.layers=0,this.handleResize=!0}reset(){}}class l{constructor(){this.reset()}reset(){this.leftHand=null,this.rightHand=null,this.camera=null}}class c extends t.TagComponent{}class d{constructor(){this.primitive="box"}reset(){this.primitive="box"}}class u{}class h{constructor(){this.value=null}reset(){this.value=null}}class m{constructor(){this.value=null}reset(){this.value=null}}class p{constructor(){this.scene=null,this.camera=null}reset(){this.scene=null,this.camera=null}}class g{constructor(){this.scene=null}reset(){this.scene=null}}class v{constructor(){this.texture="",this.type=""}reset(){this.texture="",this.type=""}}class f{reset(){}}class y{constructor(){this.position=new s.Vector3,this.rotation=new s.Vector3}copy(e){this.position.copy(e.position),this.rotation.copy(e.rotation)}reset(){this.position.set(0,0,0),this.rotation.set(0,0,0)}}class w{constructor(){this.reset()}reset(){this.value=!1}}class C{constructor(){this.vr=!1,this.ar=!1,this.antialias=!0,this.handleResize=!0,this.gammaInput=!0,this.gammaOutput=!0,this.shadowMap=!0}}class x extends t.System{execute(){this.queries.entities.removed.forEach(e=>{var t=e.getRemovedComponent(h).value;e.getComponent(m,!0).value.getComponent(h).value.remove(t)}),this.queries.entities.added.forEach(e=>{var t,n=e.getComponent(d);switch(n.primitive){case"torus":t=new s.TorusBufferGeometry(n.radius,n.tube,n.radialSegments,n.tubularSegments);break;case"sphere":t=new s.IcosahedronBufferGeometry(n.radius,1);break;case"box":t=new s.BoxBufferGeometry(n.width,n.height,n.depth)}var o="torus"===n.primitive?10066176:16777215*Math.random(),i=new s.MeshLambertMaterial({color:o,flatShading:!0}),r=new s.Mesh(t,i);if(r.castShadow=!0,r.receiveShadow=!0,e.hasComponent(y)){var a=e.getComponent(y);r.position.copy(a.position),a.rotation&&r.rotation.set(a.rotation.x,a.rotation.y,a.rotation.z)}e.addComponent(h,{value:r})})}}x.queries={entities:{components:[d],listen:{added:!0,removed:!0}}};var b=(new n.GLTFLoader).setPath("/assets/");class S extends t.System{execute(){this.queries.entities.added.forEach(e=>{var t=e.getComponent(u);b.load(t.url,t=>{e.addComponent(h,{value:t.scene})})})}}S.queries={entities:{components:[u],listen:{added:!0}}};class E extends t.System{execute(){let e=this.queries.entities.results;for(let t=0;t<e.length;t++){let n=e[t],o=n.getComponent(v),i=new s.Group,r=new s.BoxBufferGeometry(100,100,100);if(r.scale(1,1,-1),"cubemap-stereo"===o.type){let e=q(o.textureUrl,12),t=[];for(let n=0;n<6;n++)t.push(new s.MeshBasicMaterial({map:e[n]}));let a=new s.Mesh(r,t);a.layers.set(1),i.add(a);let l=[];for(let t=6;t<12;t++)l.push(new s.MeshBasicMaterial({map:e[t]}));let c=new s.Mesh(r,l);c.layers.set(2),i.add(c),n.addComponent(h,{value:i})}else console.warn("Unknown skybox type: ",o.type)}}}function q(e,t){let n=[];for(let e=0;e<t;e++)n[e]=new s.Texture;return(new s.ImageLoader).load(e,(function(e){let t,s,o=e.height;for(let i=0;i<n.length;i++)s=(t=document.createElement("canvas")).getContext("2d"),t.height=o,t.width=o,s.drawImage(e,o*i,0,o,o,0,0,o,o),n[i].image=t,n[i].needsUpdate=!0})),n}E.queries={entities:{components:[v,t.Not(h)]}};class R extends t.System{processVisibility(e){e.forEach(e=>{e.getMutableComponent(h).value.visible=e.getComponent(w).value})}execute(){this.processVisibility(this.queries.entities.added),this.processVisibility(this.queries.entities.changed)}}R.queries={entities:{components:[w,h],listen:{added:!0,changed:[w]}}};class M{constructor(){this.value=null}}class L extends t.System{init(){window.addEventListener("resize",()=>{this.queries.renderers.results.forEach(e=>{var t=e.getMutableComponent(C);t.width=window.innerWidth,t.height=window.innerHeight})},!1)}execute(){this.queries.renderers.results.forEach(e=>{var t=e.getComponent(M).value;this.queries.renderPasses.results.forEach(e=>{var s=e.getComponent(p).scene.getComponent(h).value;this.queries.activeCameras.results.forEach(e=>{var n=e.getComponent(h).value;t.render(s,n)})})}),this.queries.uninitializedRenderers.results.forEach(e=>{var t=e.getComponent(C),n=new s.WebGLRenderer({antialias:t.antialias});t.animationLoop&&n.setAnimationLoop(t.animationLoop),n.setPixelRatio(window.devicePixelRatio),t.handleResize&&n.setSize(window.innerWidth,window.innerHeight),n.gammaInput=t.gammaInput,n.gammaOutput=t.gammaOutput,n.shadowMap.enabled=t.shadowMap,document.body.appendChild(n.domElement),(t.vr||t.ar)&&(n.xr.enabled=!0,t.vr&&document.body.appendChild(o.VRButton.createButton(n)),t.ar&&document.body.appendChild(i.ARButton.createButton(n))),e.addComponent(M,{value:n})}),this.queries.renderers.changed.forEach(e=>{var t=e.getComponent(C),s=e.getComponent(M).value;t.width===s.width&&t.height===s.height||s.setSize(t.width,t.height)})}}L.queries={uninitializedRenderers:{components:[C,t.Not(M)]},renderers:{components:[C,M],listen:{changed:[C]}},renderPasses:{components:[p]},activeCameras:{components:[a,r],listen:{added:!0}}};class z extends t.System{execute(){let e=this.queries.parent.added;for(var t=0;t<e.length;t++){var s=e[t],n=s.getComponent(m).value;if(n.hasComponent(h)){var o=n.getComponent(h).value,i=s.getComponent(h).value;o.add(i)}}var r=this.queries.transforms;for(let e=0;e<r.added.length;e++){let t=r.added[e],s=t.getComponent(y),n=t.getComponent(h).value;n.position.copy(s.position),n.rotation.set(s.rotation.x,s.rotation.y,s.rotation.z)}for(let e=0;e<r.changed.length;e++){let t=r.changed[e],s=t.getComponent(y),n=t.getComponent(h).value;n.position.copy(s.position),n.rotation.set(s.rotation.x,s.rotation.y,s.rotation.z)}}}z.queries={parent:{components:[m,h],listen:{added:!0}},transforms:{components:[h,y],listen:{added:!0,changed:[y]}}};class T extends t.System{init(){window.addEventListener("resize",()=>{this.queries.cameras.results.forEach(e=>{e.getComponent(a).handleResize&&(e.getMutableComponent(a).aspect=window.innerWidth/window.innerHeight)})},!1)}execute(){let e=this.queries.cameras.changed;for(let t=0;t<e.length;t++){let s=e[t],n=s.getComponent(a),o=s.getMutableComponent(h).value;o.aspect!==n.aspect&&(o.aspect=n.aspect,o.updateProjectionMatrix())}this.queries.camerasUninitialized.results.forEach(e=>{let t=e.getComponent(a),n=new s.PerspectiveCamera(t.fov,t.aspect,t.near,t.far);n.layers.enable(t.layers),e.addComponent(h,{value:n})})}}T.queries={camerasUninitialized:{components:[a,t.Not(h)]},cameras:{components:[a,h],listen:{changed:[a]}}};class j extends t.System{init(){this.initialized=!1;var e=new s.FontLoader;this.font=null,e.load("/assets/fonts/helvetiker_regular.typeface.json",e=>{this.font=e,this.initialized=!0})}execute(){this.font&&(this.queries.entities.changed.forEach(e=>{var t=e.getComponent(f),n=new s.TextGeometry(t.text,{font:this.font,size:1,height:.1,curveSegments:3,bevelEnabled:!0,bevelThickness:.03,bevelSize:.03,bevelOffset:0,bevelSegments:3});e.getMutableComponent(h).value.geometry=n}),this.queries.entities.added.forEach(e=>{var t=e.getComponent(f),n=new s.TextGeometry(t.text,{font:this.font,size:1,height:.1,curveSegments:3,bevelEnabled:!0,bevelThickness:.03,bevelSize:.03,bevelOffset:0,bevelSegments:3});Math.random();var o=new s.MeshStandardMaterial({color:16777215,roughness:.7,metalness:0}),i=new s.Mesh(n,o);e.addComponent(h,{value:i})}))}}function B(e){e.registerSystem(z).registerSystem(T).registerSystem(L,{priority:1})}j.queries={entities:{components:[f],listen:{added:!0,changed:!0}}},e.Active=r,e.Camera=a,e.CameraRig=l,e.CameraSystem=T,e.Draggable=class{constructor(){this.reset()}reset(){this.value=!1}},e.Dragging=c,e.GLTFLoaderSystem=S,e.GLTFModel=u,e.Geometry=d,e.GeometrySystem=x,e.Material=class{constructor(){this.color=16711680}},e.Object3D=h,e.Parent=m,e.Position=class{constructor(){this.position=new s.Vector3}reset(){this.position.set(0,0,0)}},e.RenderPass=p,e.Rotation=class{constructor(){this.rotation=new s.Vector3}reset(){this.rotation.set(0,0,0)}},e.Scene=g,e.Sky=class{constructor(){}reset(){}},e.SkyBox=v,e.SkyBoxSystem=E,e.TextGeometry=f,e.TextGeometrySystem=j,e.Transform=y,e.TransformSystem=z,e.VRController=class{constructor(){this.id=0,this.controller=null}reset(){}},e.VisibilitySystem=R,e.Visible=w,e.WebGLRendererContext=M,e.WebGLRendererSystem=L,e.init=B,e.initializeDefault=function(e=new t.World,n){B(e);let o=n.animationLoop;if(!o){const t=new s.Clock;o=()=>{e.execute(t.getDelta(),t.elapsedTime)}}let i=e.createEntity().addComponent(g).addComponent(h,{value:new s.Scene}),r=e.createEntity().addComponent(C,{ar:n.ar,vr:n.vr,animationLoop:o});var c=null,d=null;n.ar||n.vr?d=e.createEntity().addComponent(l).addComponent(m,{value:i}):c=e.createEntity().addComponent(a,{fov:90,aspect:window.innerWidth/window.innerHeight,near:1,far:1e3,layers:1,handleResize:!0});let u=e.createEntity().addComponent(p,{scene:i,camera:c});return{world:e,entities:{scene:i,camera:c,cameraRig:d,renderer:r,renderPass:u}}},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
