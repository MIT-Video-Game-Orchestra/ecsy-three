!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("ecsy"),require("three"),require("three/examples/jsm/loaders/GLTFLoader.js"),require("three/examples/jsm/vr/WebVR.js")):"function"==typeof define&&define.amd?define(["exports","ecsy","three","three/examples/jsm/loaders/GLTFLoader.js","three/examples/jsm/vr/WebVR.js"],t):(e=e||self,function(){var s=e.ECSYTHREE,n=e.ECSYTHREE={};t(n,e.ECSY,e.THREE,e.GLTFLoader_js,e.WebVR_js),n.noConflict=function(){return e.ECSYTHREE=s,n}}())}(this,(function(e,t,s,n,i){"use strict";class o{constructor(){this.reset()}reset(){this.value=!1}}class a{constructor(){this.reset()}reset(){this.leftHand=null,this.rightHand=null,this.camera=null}}class r extends t.TagComponent{}class l{constructor(){this.primitive="box"}reset(){this.primitive="box"}}class c{}class d{constructor(){this.value=null}reset(){this.value=null}}class h{constructor(){this.value=null}reset(){this.value=null}}class u{constructor(){this.scene=null,this.camera=null}reset(){this.scene=null,this.camera=null}}class m{constructor(){this.scene=null}reset(){this.scene=null}}class p{constructor(){this.texture="",this.type=""}reset(){this.texture="",this.type=""}}class g{reset(){}}class v{constructor(){this.position=new s.Vector3,this.rotation=new s.Vector3}copy(e){this.position.copy(e.position),this.rotation.copy(e.rotation)}reset(){this.position.set(0,0,0),this.rotation.set(0,0,0)}}class f{constructor(){this.reset()}reset(){this.value=!1}}class y{constructor(){this.fov=45,this.aspect=1,this.near=1,this.far=1e3,this.layers=0,this.handleResize=!0}}class w{constructor(){this.vr=!0,this.antialias=!0,this.handleResize=!0,this.gammaInput=!0,this.gammaOutput=!0,this.shadowMap=!1}}class C extends t.System{execute(){this.queries.entities.removed.forEach(()=>{}),this.queries.entities.added.forEach(e=>{var t,n=e.getComponent(l);switch(n.primitive){case"torus":t=new s.TorusBufferGeometry(n.radius,n.tube,n.radialSegments,n.tubularSegments);break;case"sphere":t=new s.IcosahedronBufferGeometry(n.radius,1);break;case"box":t=new s.BoxBufferGeometry(n.width,n.height,n.depth)}var i="torus"===n.primitive?10066176:16777215*Math.random(),o=new s.MeshLambertMaterial({color:i,flatShading:!0}),a=new s.Mesh(t,o);if(a.castShadow=!0,a.receiveShadow=!0,e.hasComponent(v)){var r=e.getComponent(v);a.position.copy(r.position),r.rotation&&a.rotation.set(r.rotation.x,r.rotation.y,r.rotation.z)}e.addComponent(d,{value:a}),e.hasComponent(h)&&e.getComponent(h).value.getComponent(d).value.add(a)})}}C.queries={entities:{components:[l],listen:{added:!0,removed:!0}}};var x=(new n.GLTFLoader).setPath("/assets/");class b extends t.System{execute(){var e=this.queries.entities.added;for(let n=0;n<e.length;n++){var t=e[n],s=t.getComponent(c);x.load(s.url,e=>{t.hasComponent(h)&&t.getComponent(h).value.add(e.scene),t.addComponent(d,{value:e.scene})})}}}b.queries={entities:{components:[c],listen:{added:!0}}};class S extends t.System{execute(){let e=this.queries.entities.results;for(let t=0;t<e.length;t++){let n=e[t],i=n.getComponent(p),o=new s.Group,a=new s.BoxBufferGeometry(100,100,100);if(a.scale(1,1,-1),"cubemap-stereo"===i.type){let e=E(i.textureUrl,12),t=[];for(let n=0;n<6;n++)t.push(new s.MeshBasicMaterial({map:e[n]}));let r=new s.Mesh(a,t);r.layers.set(1),o.add(r);let l=[];for(let t=6;t<12;t++)l.push(new s.MeshBasicMaterial({map:e[t]}));let c=new s.Mesh(a,l);c.layers.set(2),o.add(c),n.addComponent(d,{value:o})}else console.warn("Unknown skybox type: ",i.type)}}}function E(e,t){let n=[];for(let e=0;e<t;e++)n[e]=new s.Texture;return(new s.ImageLoader).load(e,(function(e){let t,s,i=e.height;for(let o=0;o<n.length;o++)s=(t=document.createElement("canvas")).getContext("2d"),t.height=i,t.width=i,s.drawImage(e,i*o,0,i,i,0,0,i,i),n[o].image=t,n[o].needsUpdate=!0})),n}S.queries={entities:{components:[p,t.Not(d)]}};class q extends t.System{processVisibility(e){e.forEach(e=>{e.getMutableComponent(d).value.visible=e.getComponent(f).value})}execute(){this.processVisibility(this.queries.entities.added),this.processVisibility(this.queries.entities.changed)}}q.queries={entities:{components:[f,d],listen:{added:!0,changed:[f]}}};class M{constructor(){this.value=null}}class R extends t.System{init(){window.addEventListener("resize",()=>{this.queries.renderers.results.forEach(e=>{var t=e.getMutableComponent(w);t.width=window.innerWidth,t.height=window.innerHeight})},!1)}execute(){this.queries.renderers.results.forEach(e=>{var t=e.getComponent(M).value;this.queries.renderPasses.results.forEach(e=>{var s=e.getComponent(u).scene.getComponent(d).value;this.queries.activeCameras.results.forEach(e=>{var n=e.getComponent(d).value;t.render(s,n)})})}),this.queries.uninitializedRenderers.results.forEach(e=>{var t=e.getComponent(w),n=new s.WebGLRenderer({antialias:t.antialias});t.animationLoop&&n.setAnimationLoop(t.animationLoop),n.setPixelRatio(window.devicePixelRatio),t.handleResize&&n.setSize(window.innerWidth,window.innerHeight),n.gammaInput=t.gammaInput,n.gammaOutput=t.gammaOutput,n.shadowMap.enabled=t.shadowMap,document.body.appendChild(n.domElement),t.vr&&(n.vr.enabled=!0,document.body.appendChild(i.WEBVR.createButton(n,{referenceSpaceType:"local"}))),e.addComponent(M,{value:n})}),this.queries.renderers.changed.forEach(e=>{var t=e.getComponent(w),s=e.getComponent(M).value;t.width===s.width&&t.height===s.height||s.setSize(t.width,t.height)})}}R.queries={uninitializedRenderers:{components:[w,t.Not(M)]},renderers:{components:[w,M],listen:{changed:[w]}},renderPasses:{components:[u]},activeCameras:{components:[y,o],listen:{added:!0}}};class L extends t.System{execute(){let e=this.queries.parent.added;for(var t=0;t<e.length;t++){var s=e[t],n=s.getComponent(h).value.getComponent(d).value,i=s.getComponent(d).value;n.add(i)}}}L.queries={parent:{components:[h,d],listen:{added:!0}}};class T extends t.System{init(){window.addEventListener("resize",()=>{this.queries.cameras.results.forEach(e=>{e.getComponent(y).handleResize&&(e.getMutableComponent(y).aspect=window.innerWidth/window.innerHeight,console.log("Aspect updated"))})},!1)}execute(){let e=this.queries.cameras.changed;for(let t=0;t<e.length;t++){let s=e[t],n=s.getComponent(y),i=s.getMutableComponent(d).value;i.aspect!==n.aspect&&(console.log("Camera Updated"),i.aspect=n.aspect,i.updateProjectionMatrix())}this.queries.camerasUninitialized.results.forEach(e=>{console.log(e);let t=e.getComponent(y),n=new s.PerspectiveCamera(t.fov,t.aspect,t.near,t.far);n.layers.enable(t.layers),e.addComponent(d,{value:n})})}}T.queries={camerasUninitialized:{components:[y,t.Not(d)]},cameras:{components:[y,d],listen:{changed:[y]}}};class z extends t.System{init(){this.initialized=!1;var e=new s.FontLoader;this.font=null,e.load("/assets/fonts/helvetiker_regular.typeface.json",e=>{this.font=e,this.initialized=!0})}execute(){this.font&&(this.queries.entities.changed.forEach(e=>{var t=e.getComponent(g),n=new s.TextGeometry(t.text,{font:this.font,size:1,height:.1,curveSegments:3,bevelEnabled:!0,bevelThickness:.03,bevelSize:.03,bevelOffset:0,bevelSegments:3});e.getMutableComponent(d).value.geometry=n}),this.queries.entities.added.forEach(e=>{var t=e.getComponent(g),n=new s.TextGeometry(t.text,{font:this.font,size:1,height:.1,curveSegments:3,bevelEnabled:!0,bevelThickness:.03,bevelSize:.03,bevelOffset:0,bevelSegments:3});Math.random();var i=new s.MeshStandardMaterial({color:16777215,roughness:.7,metalness:0}),o=new s.Mesh(n,i);e.addComponent(d,{value:o})}))}}function G(e){e.registerSystem(L).registerSystem(T).registerSystem(R,{priority:1})}z.queries={entities:{components:[g],listen:{added:!0,changed:!0}}},e.Active=o,e.Camera=y,e.CameraRig=a,e.CameraSystem=T,e.Draggable=class{constructor(){this.reset()}reset(){this.value=!1}},e.Dragging=r,e.GLTFLoaderSystem=b,e.GLTFModel=c,e.Geometry=l,e.GeometrySystem=C,e.Material=class{constructor(){this.color=16711680}},e.Object3D=d,e.Parent=h,e.Position=class{constructor(){this.position=new s.Vector3}reset(){this.position.set(0,0,0)}},e.RenderPass=u,e.Rotation=class{constructor(){this.rotation=new s.Vector3}reset(){this.rotation.set(0,0,0)}},e.Scene=m,e.Sky=class{constructor(){}reset(){}},e.SkyBox=p,e.SkyBoxSystem=S,e.TextGeometry=g,e.TextGeometrySystem=z,e.Transform=v,e.TransformSystem=L,e.VRController=class{constructor(){this.id=0,this.controller=null}reset(){}},e.VisibilitySystem=q,e.Visible=f,e.WebGLRendererContext=M,e.WebGLRendererSystem=R,e.init=G,e.initializeDefault=function(e=new t.World,n){const i=new s.Clock;G(e);let o=e.createEntity().addComponent(m).addComponent(d,{value:new s.Scene}),r=e.createEntity().addComponent(w,{animationLoop:()=>{e.execute(i.getDelta(),i.elapsedTime)}});var l=null,c=null;n.vr?c=e.createEntity().addComponent(a):l=e.createEntity().addComponent(y,{fov:90,aspect:window.innerWidth/window.innerHeight,near:1,far:1e3,layers:1,handleResize:!0});let h=e.createEntity().addComponent(u,{scene:o,camera:l});return{world:e,entities:{scene:o,camera:l,cameraRig:c,renderer:r,renderPass:h}}},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
