!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("ecsy"),require("three")):"function"==typeof define&&define.amd?define(["exports","ecsy","three"],t):(e=e||self,function(){var s=e.ECSYTHREE,n=e.ECSYTHREE={};t(n,e.ECSY,e.THREE),n.noConflict=function(){return e.ECSYTHREE=s,n}}())}(this,(function(e,t,s){"use strict";class n{constructor(){this.reset()}reset(){this.value=!1}}class o{constructor(){this.fov=45,this.aspect=1,this.near=1,this.far=1e3,this.layers=0,this.handleResize=!0}reset(){}}class i{constructor(){this.reset()}reset(){this.leftHand=null,this.rightHand=null,this.camera=null}}class r extends t.TagComponent{}class a{reset(){}constructor(){this.active=!1,this.preset="default",this.seed=1,this.skyType="atmosphere",this.skyColor="",this.horizonColor="",this.lighting="distant",this.shadow=!1,this.shadowSize=10,this.lightPosition={x:0,y:1,z:-.2},this.fog=0,this.flatShading=!1,this.playArea=1,this.ground="flat",this.groundYScale=3,this.groundTexture="none",this.groundColor="#553e35",this.groundColor2="#694439",this.dressing="none",this.dressingAmount=10,this.dressingColor="#795449",this.dressingScale=5,this.dressingVariance={x:1,y:1,z:1},this.dressingUniformScale=!0,this.dressingOnPlayArea=0,this.grid="none",this.gridColor="#ccc"}}class l{constructor(){this.primitive="box"}reset(){this.primitive="box"}}class d{}const h={front:0,back:1,double:2},c={standard:0,flat:1},u={normal:0,additive:1,subtractive:2,multiply:3},m={none:0,face:1,vertex:2};class p{constructor(){this.color=16711680,this.alphaTest=0,this.depthTest=!0,this.depthWrite=!0,this.flatShading=!1,this.npot=!1,this.offset=new s.Vector2,this.opacity=1,this.repeat=new s.Vector2(1,1),this.shader=c.standard,this.side=h.front,this.transparent=!1,this.vertexColors=m.none,this.visible=!0,this.blending=u.normal}reset(){this.color=16711680,this.alphaTest=0,this.depthTest=!0,this.depthWrite=!0,this.flatShading=!1,this.npot=!1,this.offset.set(0,0),this.opacity=1,this.repeat.set(1,1),this.shader=c.standard,this.side=h.front,this.transparent=!1,this.vertexColors=m.none,this.visible=!0,this.blending=u.normal}}class g{constructor(){this.value=null}reset(){this.value=null}}class v{constructor(){this.value=null}reset(){this.value=null}}class f{constructor(){this.scene=null,this.camera=null}reset(){this.scene=null,this.camera=null}}class y{constructor(){this.scene=null}reset(){this.scene=null}}class C{constructor(){this.texture="",this.type=""}reset(){this.texture="",this.type=""}}class w{reset(){}}class S{constructor(){this.position=new s.Vector3,this.rotation=new s.Vector3}copy(e){this.position.copy(e.position),this.rotation.copy(e.rotation)}reset(){this.position.set(0,0,0),this.rotation.set(0,0,0)}}class x{constructor(){this.reset()}reset(){this.value=!1}}class b{constructor(){this.vr=!1,this.ar=!1,this.antialias=!0,this.handleResize=!0,this.gammaOutput=!0,this.shadowMap=!0}}class E extends t.SystemStateComponent{constructor(){super(),this.value=new s.MeshStandardMaterial}reset(){}}class M extends t.System{execute(){this.queries.new.results.forEach(e=>{e.getComponent(p)})}}M.queries={new:{components:[p,t.Not(E)]}};class q extends t.System{execute(){this.queries.entities.removed.forEach(e=>{var t=e.getRemovedComponent(g).value;e.getComponent(v,!0).value.getComponent(g).value.remove(t)}),this.queries.entities.added.forEach(e=>{var t,n=e.getComponent(l);switch(n.primitive){case"torus":t=new s.TorusBufferGeometry(n.radius,n.tube,n.radialSegments,n.tubularSegments);break;case"sphere":t=new s.IcosahedronBufferGeometry(n.radius,1);break;case"box":t=new s.BoxBufferGeometry(n.width,n.height,n.depth)}var o="torus"===n.primitive?10066176:16777215*Math.random(),i=new s.MeshLambertMaterial({color:o,flatShading:!0}),r=new s.Mesh(t,i);if(r.castShadow=!0,r.receiveShadow=!0,e.hasComponent(S)){var a=e.getComponent(S);r.position.copy(a.position),a.rotation&&r.rotation.set(a.rotation.x,a.rotation.y,a.rotation.z)}e.addComponent(g,{value:r})})}}q.queries={entities:{components:[l],listen:{added:!0,removed:!0}}};var R=(new GLTFLoader).setPath("/assets/");class z extends t.System{execute(){this.queries.entities.added.forEach(e=>{var t=e.getComponent(d);R.load(t.url,t=>{e.addComponent(g,{value:t.scene})})})}}z.queries={entities:{components:[d],listen:{added:!0}}};class T extends t.System{execute(){let e=this.queries.entities.results;for(let t=0;t<e.length;t++){let n=e[t],o=n.getComponent(C),i=new s.Group,r=new s.BoxBufferGeometry(100,100,100);if(r.scale(1,1,-1),"cubemap-stereo"===o.type){let e=L(o.textureUrl,12),t=[];for(let n=0;n<6;n++)t.push(new s.MeshBasicMaterial({map:e[n]}));let a=new s.Mesh(r,t);a.layers.set(1),i.add(a);let l=[];for(let t=6;t<12;t++)l.push(new s.MeshBasicMaterial({map:e[t]}));let d=new s.Mesh(r,l);d.layers.set(2),i.add(d),n.addComponent(g,{value:i})}else console.warn("Unknown skybox type: ",o.type)}}}function L(e,t){let n=[];for(let e=0;e<t;e++)n[e]=new s.Texture;return(new s.ImageLoader).load(e,(function(e){let t,s,o=e.height;for(let i=0;i<n.length;i++)s=(t=document.createElement("canvas")).getContext("2d"),t.height=o,t.width=o,s.drawImage(e,o*i,0,o,o,0,0,o,o),n[i].image=t,n[i].needsUpdate=!0})),n}T.queries={entities:{components:[C,t.Not(g)]}};class G extends t.System{processVisibility(e){e.forEach(e=>{e.getMutableComponent(g).value.visible=e.getComponent(x).value})}execute(){this.processVisibility(this.queries.entities.added),this.processVisibility(this.queries.entities.changed)}}G.queries={entities:{components:[x,g],listen:{added:!0,changed:[x]}}};class P{constructor(){this.value=null}}class k extends t.System{init(){window.addEventListener("resize",()=>{this.queries.renderers.results.forEach(e=>{var t=e.getMutableComponent(b);t.width=window.innerWidth,t.height=window.innerHeight})},!1)}execute(){this.queries.renderers.results.forEach(e=>{var t=e.getComponent(P).value;this.queries.renderPasses.results.forEach(e=>{var s=e.getComponent(f).scene.getComponent(g).value;this.queries.activeCameras.results.forEach(e=>{var n=e.getComponent(g).value;t.render(s,n)})})}),this.queries.uninitializedRenderers.results.forEach(e=>{var t=e.getComponent(b),n=new s.WebGLRenderer({antialias:t.antialias});t.animationLoop&&n.setAnimationLoop(t.animationLoop),n.setPixelRatio(window.devicePixelRatio),t.handleResize&&n.setSize(window.innerWidth,window.innerHeight),n.gammaOutput=t.gammaOutput,n.shadowMap.enabled=t.shadowMap,document.body.appendChild(n.domElement),(t.vr||t.ar)&&(n.xr.enabled=!0,t.vr&&document.body.appendChild(VRButton.createButton(n)),t.ar&&document.body.appendChild(ARButton.createButton(n))),e.addComponent(P,{value:n})}),this.queries.renderers.changed.forEach(e=>{var t=e.getComponent(b),s=e.getComponent(P).value;t.width===s.width&&t.height===s.height||s.setSize(t.width,t.height)})}}k.queries={uninitializedRenderers:{components:[b,t.Not(P)]},renderers:{components:[b,P],listen:{changed:[b]}},renderPasses:{components:[f]},activeCameras:{components:[o,n],listen:{added:!0}}};class B extends t.System{execute(){let e=this.queries.parent.added;for(var t=0;t<e.length;t++){var s=e[t],n=s.getComponent(v).value;if(n.hasComponent(g)){var o=n.getComponent(g).value,i=s.getComponent(g).value;o.add(i)}}var r=this.queries.transforms;for(let e=0;e<r.added.length;e++){let t=r.added[e],s=t.getComponent(S),n=t.getComponent(g).value;n.position.copy(s.position),n.rotation.set(s.rotation.x,s.rotation.y,s.rotation.z)}for(let e=0;e<r.changed.length;e++){let t=r.changed[e],s=t.getComponent(S),n=t.getComponent(g).value;n.position.copy(s.position),n.rotation.set(s.rotation.x,s.rotation.y,s.rotation.z)}}}B.queries={parent:{components:[v,g],listen:{added:!0}},transforms:{components:[g,S],listen:{added:!0,changed:[S]}}};class V extends t.System{init(){window.addEventListener("resize",()=>{this.queries.cameras.results.forEach(e=>{e.getComponent(o).handleResize&&(e.getMutableComponent(o).aspect=window.innerWidth/window.innerHeight)})},!1)}execute(){let e=this.queries.cameras.changed;for(let t=0;t<e.length;t++){let s=e[t],n=s.getComponent(o),i=s.getMutableComponent(g).value;i.aspect!==n.aspect&&(i.aspect=n.aspect,i.updateProjectionMatrix())}this.queries.camerasUninitialized.results.forEach(e=>{let t=e.getComponent(o),n=new s.PerspectiveCamera(t.fov,t.aspect,t.near,t.far);n.layers.enable(t.layers),e.addComponent(g,{value:n})})}}V.queries={camerasUninitialized:{components:[o,t.Not(g)]},cameras:{components:[o,g],listen:{changed:[o]}}};class W extends t.System{init(){this.initialized=!1;var e=new s.FontLoader;this.font=null,e.load("/assets/fonts/helvetiker_regular.typeface.json",e=>{this.font=e,this.initialized=!0})}execute(){this.font&&(this.queries.entities.changed.forEach(e=>{var t=e.getComponent(w),n=new s.TextGeometry(t.text,{font:this.font,size:1,height:.1,curveSegments:3,bevelEnabled:!0,bevelThickness:.03,bevelSize:.03,bevelOffset:0,bevelSegments:3});e.getMutableComponent(g).value.geometry=n}),this.queries.entities.added.forEach(e=>{var t=e.getComponent(w),n=new s.TextGeometry(t.text,{font:this.font,size:1,height:.1,curveSegments:3,bevelEnabled:!0,bevelThickness:.03,bevelSize:.03,bevelOffset:0,bevelSegments:3});Math.random();var o=new s.MeshStandardMaterial({color:16777215,roughness:.7,metalness:0}),i=new s.Mesh(n,o);e.addComponent(g,{value:i})}))}}W.queries={entities:{components:[w],listen:{added:!0,changed:!0}}};class H extends t.System{execute(){this.queries.environments.added.forEach(e=>{var t=document.createElement("canvas");t.width=2048,t.height=2048;var n=new s.Texture(t);n.wrapS=s.RepeatWrapping,n.wrapT=s.RepeatWrapping,n.repeat.set(10,10),this.environmentData={groundColor:"#454545",groundColor2:"#5d5d5d"};var o=t.getContext("2d");o.fillStyle=this.environmentData.groundColor,o.fillRect(0,0,2048,2048),o.fillStyle=this.environmentData.groundColor2;for(var i=Math.floor(10),r=0;r<i+1;r+=2)for(var a=0;a<i+1;a++)o.fillRect(Math.floor(204.8*(r+a%2)),Math.floor(204.8*a),Math.floor(204.8),Math.floor(204.8));n.needsUpdate=!0;var l=new s.MeshLambertMaterial({map:n});let d=e.getComponent(y).value.getComponent(g).value;var h=new s.PlaneBufferGeometry(202,202,63,63);let c=new s.Mesh(h,l);c.rotation.x=-Math.PI/2,c.receiveShadow=!0,e.addComponent(g,{value:c}),e.addComponent(v,{value:window.entityScene});d.fog=new s.Fog(3355443,20,100),d.background=new s.Color(3355443)})}}function D(e){e.registerSystem(B).registerSystem(V).registerSystem(MaterialSystem).registerSystem(k,{priority:1})}H.queries={environments:{components:[y,a],listen:{added:!0}}},e.Active=n,e.Camera=o,e.CameraRig=i,e.CameraSystem=V,e.Draggable=class{constructor(){this.reset()}reset(){this.value=!1}},e.Dragging=r,e.Environment=a,e.EnvironmentSystem=H,e.GLTFLoaderSystem=z,e.GLTFModel=d,e.Geometry=l,e.GeometrySystem=q,e.Material=p,e.MaterialSystem=M,e.Object3D=g,e.Parent=v,e.Position=class{constructor(){this.position=new s.Vector3}reset(){this.position.set(0,0,0)}},e.RenderPass=f,e.Rotation=class{constructor(){this.rotation=new s.Vector3}reset(){this.rotation.set(0,0,0)}},e.Scene=y,e.Sky=class{constructor(){}reset(){}},e.SkyBox=C,e.SkyBoxSystem=T,e.TextGeometry=w,e.TextGeometrySystem=W,e.Transform=S,e.TransformSystem=B,e.VRController=class{constructor(){this.id=0,this.controller=null}reset(){}},e.VisibilitySystem=G,e.Visible=x,e.WebGLRendererContext=P,e.WebGLRendererSystem=k,e.init=D,e.initializeDefault=function(e=new t.World,n){D(e);let r=n.animationLoop;if(!r){const t=new s.Clock;r=()=>{e.execute(t.getDelta(),t.elapsedTime)}}let a=e.createEntity().addComponent(y).addComponent(g,{value:new s.Scene}),l=e.createEntity().addComponent(b,{ar:n.ar,vr:n.vr,animationLoop:r});var d=null,h=null;n.ar||n.vr?h=e.createEntity().addComponent(i).addComponent(v,{value:a}):d=e.createEntity().addComponent(o,{fov:90,aspect:window.innerWidth/window.innerHeight,near:1,far:1e3,layers:1,handleResize:!0});let c=e.createEntity().addComponent(f,{scene:a,camera:d});return{world:e,entities:{scene:a,camera:d,cameraRig:h,renderer:l,renderPass:c}}},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
