!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("ecsy"),require("three"),require("three/examples/jsm/vr/WebVR.js")):"function"==typeof define&&define.amd?define(["exports","ecsy","three","three/examples/jsm/vr/WebVR.js"],t):(e=e||self,function(){var n=e.ECSYTHREE,r=e.ECSYTHREE={};t(r,e.ECSY,e.THREE,e.WebVR_js),r.noConflict=function(){return e.ECSYTHREE=n,r}}())}(this,(function(e,t,n,r){"use strict";class s{constructor(){this.texture="",this.type=""}reset(){this.texture="",this.type=""}}class a{constructor(){this.value=null}reset(){this.value=null}}class i{constructor(){this.parent=null}reset(){this.parent=null}}const o=t.createComponentClass({fov:{default:45},aspect:{default:1},near:{default:1},far:{default:1e3},layers:{default:0},handleResize:{default:!0}},"Camera"),l=t.createComponentClass({vr:{default:!0},antialias:{default:!0},handleResize:{default:!0}},"WebGLRenderer");class d{constructor(){this.scene=null,this.camera=null}reset(){this.scene=null,this.camera=null}}class c extends t.System{execute(){let e=this.queries.entities.results;for(var t=0;t<e.length;t++){var r=e[t],i=r.getComponent(s),o=new n.Group,l=new n.BoxBufferGeometry(100,100,100);if(l.scale(1,1,-1),"cubemap-stereo"===i.type){var d=u(i.textureUrl,12),c=[];for(t=0;t<6;t++)c.push(new n.MeshBasicMaterial({map:d[t]}));var h=new n.Mesh(l,c);h.layers.set(1),o.add(h);var m=[];for(t=6;t<12;t++)m.push(new n.MeshBasicMaterial({map:d[t]}));var p=new n.Mesh(l,m);p.layers.set(2),o.add(p),r.addComponent(a,{value:o})}else console.warn("Unknown skybox type: ",i.type)}}}function u(e,t){for(var r=[],s=0;s<t;s++)r[s]=new n.Texture;return(new n.ImageLoader).load(e,(function(e){for(var t,n,s=e.height,a=0;a<r.length;a++)n=(t=document.createElement("canvas")).getContext("2d"),t.height=s,t.width=s,n.drawImage(e,s*a,0,s,s,0,0,s,s),r[a].image=t,r[a].needsUpdate=!0})),r}c.queries={entities:{components:[s,t.Not(a)]}};class h{constructor(){this.renderer=null}}class m extends t.System{init(){window.addEventListener("resize",()=>{this.queries.renderers.results.forEach(e=>{var t=e.getMutableComponent(l);t.width=window.innerWidth,t.height=window.innerHeight})},!1)}execute(e){this.queries.uninitializedRenderers.results.forEach(e=>{var t=e.getComponent(l),s=new n.WebGLRenderer({antialias:t.antialias});s.setPixelRatio(window.devicePixelRatio),t.handleResize&&s.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(s.domElement),t.vr&&(s.vr.enabled=!0,document.body.appendChild(r.WEBVR.createButton(s,{referenceSpaceType:"local"}))),e.addComponent(h,{renderer:s})}),this.queries.renderers.changed.forEach(e=>{var t=e.getComponent(l),n=e.getComponent(h).renderer;t.width===n.width&&t.height===n.height||n.setSize(t.width,t.height)}),this.queries.renderers.results.forEach(e=>{var t=e.getComponent(h).renderer;this.queries.renderables.results.forEach(e=>{var n=e.getComponent(d),r=n.scene.getComponent(a).value,s=n.camera.getComponent(a).value;t.render(r,s)})})}}m.queries={uninitializedRenderers:{components:[l,t.Not(h)]},renderers:{components:[l,h],listen:{changed:[l]}},renderables:{components:[d]}};class p extends t.System{execute(e){let t=this.queries.parent.added;for(var n=0;n<t.length;n++){var r=t[n];r.getComponent(i).parent.getComponent(a).value.add(r.getComponent(a).value)}}}p.queries={parent:{components:[i,a],listen:{added:!0}}};class f extends t.System{init(){window.addEventListener("resize",()=>{this.queries.cameras.results.forEach(e=>{e.getComponent(o).handleResize&&(e.getMutableComponent(o).aspect=window.innerWidth/window.innerHeight,console.log("Aspect updated"))})},!1)}execute(e){let t=this.queries.cameras.changed;for(var r=0;r<t.length;r++){var s=(d=t[r]).getComponent(o),i=d.getMutableComponent(a).value;i.aspect!==s.aspect&&(console.log("Camera Updated"),i.aspect=s.aspect,i.updateProjectionMatrix())}let l=this.queries.camerasUninitialized.results;for(r=0;r<l.length;r++){s=(d=l[r]).getComponent(o);var d,c=new n.PerspectiveCamera(s.fov,s.aspect,s.near,s.far);c.layers.enable(s.layers),d.addComponent(a,{value:c})}}}function g(e){e.registerSystem(p).registerSystem(f).registerSystem(m,{priority:1})}f.queries={camerasUninitialized:{components:[o,t.Not(a)]},cameras:{components:[o,a],listen:{changed:[o]}}},e.ECSY=t,e.THREE=n,e.Camera=o,e.CameraSystem=f,e.Object3D=a,e.Parent=i,e.Scene=class{constructor(){this.scene=null}reset(){this.scene=null}},e.SkyBox=s,e.SkyBoxSystem=c,e.TransformSystem=p,e.WebGLRendererSystem=m,e.init=g,e.initializeDefault=function(e=new t.World){g(e);let r=e.createEntity().addComponent(a,{value:new n.Scene}),s=e.createEntity().addComponent(l),i=e.createEntity().addComponent(o,{fov:90,aspect:window.innerWidth/window.innerHeight,near:1,far:1e3,layers:1,handleResize:!0}),c=e.createEntity().addComponent(d,{scene:r,camera:i});return{world:e,entities:{scene:r,camera:i,renderer:s,renderables:c}}},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
